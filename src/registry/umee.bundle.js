import * as $protobuf from "protobufjs";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const cosmos = $root.cosmos = (() => {

    /**
     * Namespace cosmos.
     * @exports cosmos
     * @namespace
     */
    const cosmos = {};

    cosmos.base = (function() {

        /**
         * Namespace base.
         * @memberof cosmos
         * @namespace
         */
        const base = {};

        base.v1beta1 = (function() {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.base
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.Coin = (function() {

                /**
                 * Properties of a Coin.
                 * @memberof cosmos.base.v1beta1
                 * @interface ICoin
                 * @property {string|null} [denom] Coin denom
                 * @property {string|null} [amount] Coin amount
                 */

                /**
                 * Constructs a new Coin.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a Coin.
                 * @implements ICoin
                 * @constructor
                 * @param {cosmos.base.v1beta1.ICoin=} [properties] Properties to set
                 */
                function Coin(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Coin denom.
                 * @member {string} denom
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 */
                Coin.prototype.denom = "";

                /**
                 * Coin amount.
                 * @member {string} amount
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 */
                Coin.prototype.amount = "";

                /**
                 * Creates a new Coin instance using the specified properties.
                 * @function create
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.ICoin=} [properties] Properties to set
                 * @returns {cosmos.base.v1beta1.Coin} Coin instance
                 */
                Coin.create = function create(properties) {
                    return new Coin(properties);
                };

                /**
                 * Encodes the specified Coin message. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Coin.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                    if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                    return writer;
                };

                /**
                 * Encodes the specified Coin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Coin.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Coin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Coin.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.Coin();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.denom = reader.string();
                            break;
                        case 2:
                            message.amount = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Coin message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Coin.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Coin message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Coin.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        if (!$util.isString(message.denom))
                            return "denom: string expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isString(message.amount))
                            return "amount: string expected";
                    return null;
                };

                /**
                 * Creates a Coin message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 */
                Coin.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.Coin)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.Coin();
                    if (object.denom != null)
                        message.denom = String(object.denom);
                    if (object.amount != null)
                        message.amount = String(object.amount);
                    return message;
                };

                /**
                 * Creates a plain object from a Coin message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.Coin} message Coin
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Coin.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.denom = "";
                        object.amount = "";
                    }
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        object.denom = message.denom;
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    return object;
                };

                /**
                 * Converts this Coin to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Coin.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Coin;
            })();

            v1beta1.DecCoin = (function() {

                /**
                 * Properties of a DecCoin.
                 * @memberof cosmos.base.v1beta1
                 * @interface IDecCoin
                 * @property {string|null} [denom] DecCoin denom
                 * @property {string|null} [amount] DecCoin amount
                 */

                /**
                 * Constructs a new DecCoin.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a DecCoin.
                 * @implements IDecCoin
                 * @constructor
                 * @param {cosmos.base.v1beta1.IDecCoin=} [properties] Properties to set
                 */
                function DecCoin(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DecCoin denom.
                 * @member {string} denom
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 */
                DecCoin.prototype.denom = "";

                /**
                 * DecCoin amount.
                 * @member {string} amount
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 */
                DecCoin.prototype.amount = "";

                /**
                 * Creates a new DecCoin instance using the specified properties.
                 * @function create
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.IDecCoin=} [properties] Properties to set
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin instance
                 */
                DecCoin.create = function create(properties) {
                    return new DecCoin(properties);
                };

                /**
                 * Encodes the specified DecCoin message. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecCoin.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                    if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                    return writer;
                };

                /**
                 * Encodes the specified DecCoin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecCoin.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DecCoin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecCoin.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecCoin();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.denom = reader.string();
                            break;
                        case 2:
                            message.amount = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DecCoin message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecCoin.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DecCoin message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DecCoin.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        if (!$util.isString(message.denom))
                            return "denom: string expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isString(message.amount))
                            return "amount: string expected";
                    return null;
                };

                /**
                 * Creates a DecCoin message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 */
                DecCoin.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.DecCoin)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.DecCoin();
                    if (object.denom != null)
                        message.denom = String(object.denom);
                    if (object.amount != null)
                        message.amount = String(object.amount);
                    return message;
                };

                /**
                 * Creates a plain object from a DecCoin message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.DecCoin} message DecCoin
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DecCoin.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.denom = "";
                        object.amount = "";
                    }
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        object.denom = message.denom;
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    return object;
                };

                /**
                 * Converts this DecCoin to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DecCoin.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DecCoin;
            })();

            v1beta1.IntProto = (function() {

                /**
                 * Properties of an IntProto.
                 * @memberof cosmos.base.v1beta1
                 * @interface IIntProto
                 * @property {string|null} [int] IntProto int
                 */

                /**
                 * Constructs a new IntProto.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents an IntProto.
                 * @implements IIntProto
                 * @constructor
                 * @param {cosmos.base.v1beta1.IIntProto=} [properties] Properties to set
                 */
                function IntProto(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * IntProto int.
                 * @member {string} int
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @instance
                 */
                IntProto.prototype.int = "";

                /**
                 * Creates a new IntProto instance using the specified properties.
                 * @function create
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IIntProto=} [properties] Properties to set
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto instance
                 */
                IntProto.create = function create(properties) {
                    return new IntProto(properties);
                };

                /**
                 * Encodes the specified IntProto message. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IntProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.int != null && Object.hasOwnProperty.call(message, "int"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.int);
                    return writer;
                };

                /**
                 * Encodes the specified IntProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IntProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an IntProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IntProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.IntProto();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.int = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an IntProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IntProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an IntProto message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                IntProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.int != null && message.hasOwnProperty("int"))
                        if (!$util.isString(message.int))
                            return "int: string expected";
                    return null;
                };

                /**
                 * Creates an IntProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 */
                IntProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.IntProto)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.IntProto();
                    if (object.int != null)
                        message.int = String(object.int);
                    return message;
                };

                /**
                 * Creates a plain object from an IntProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IntProto} message IntProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                IntProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.int = "";
                    if (message.int != null && message.hasOwnProperty("int"))
                        object.int = message.int;
                    return object;
                };

                /**
                 * Converts this IntProto to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                IntProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return IntProto;
            })();

            v1beta1.DecProto = (function() {

                /**
                 * Properties of a DecProto.
                 * @memberof cosmos.base.v1beta1
                 * @interface IDecProto
                 * @property {string|null} [dec] DecProto dec
                 */

                /**
                 * Constructs a new DecProto.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a DecProto.
                 * @implements IDecProto
                 * @constructor
                 * @param {cosmos.base.v1beta1.IDecProto=} [properties] Properties to set
                 */
                function DecProto(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DecProto dec.
                 * @member {string} dec
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @instance
                 */
                DecProto.prototype.dec = "";

                /**
                 * Creates a new DecProto instance using the specified properties.
                 * @function create
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.IDecProto=} [properties] Properties to set
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto instance
                 */
                DecProto.create = function create(properties) {
                    return new DecProto(properties);
                };

                /**
                 * Encodes the specified DecProto message. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.dec != null && Object.hasOwnProperty.call(message, "dec"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.dec);
                    return writer;
                };

                /**
                 * Encodes the specified DecProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DecProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecProto();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.dec = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DecProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DecProto message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DecProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.dec != null && message.hasOwnProperty("dec"))
                        if (!$util.isString(message.dec))
                            return "dec: string expected";
                    return null;
                };

                /**
                 * Creates a DecProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 */
                DecProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.DecProto)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.DecProto();
                    if (object.dec != null)
                        message.dec = String(object.dec);
                    return message;
                };

                /**
                 * Creates a plain object from a DecProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.DecProto} message DecProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DecProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.dec = "";
                    if (message.dec != null && message.hasOwnProperty("dec"))
                        object.dec = message.dec;
                    return object;
                };

                /**
                 * Converts this DecProto to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DecProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DecProto;
            })();

            return v1beta1;
        })();

        return base;
    })();

    return cosmos;
})();

export const umeenetwork = $root.umeenetwork = (() => {

    /**
     * Namespace umeenetwork.
     * @exports umeenetwork
     * @namespace
     */
    const umeenetwork = {};

    umeenetwork.umee = (function() {

        /**
         * Namespace umee.
         * @memberof umeenetwork
         * @namespace
         */
        const umee = {};

        umee.leverage = (function() {

            /**
             * Namespace leverage.
             * @memberof umeenetwork.umee
             * @namespace
             */
            const leverage = {};

            leverage.v1beta1 = (function() {

                /**
                 * Namespace v1beta1.
                 * @memberof umeenetwork.umee.leverage
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.Msg = (function() {

                    /**
                     * Constructs a new Msg service.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a Msg
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Msg(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                    /**
                     * Creates new Msg service using the specified rpc implementation.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Msg} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Msg.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Msg#lendAsset}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @typedef LendAssetCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse} [response] MsgLendAssetResponse
                     */

                    /**
                     * Calls LendAsset.
                     * @function lendAsset
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLendAsset} request MsgLendAsset message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Msg.LendAssetCallback} callback Node-style callback called with the error, if any, and MsgLendAssetResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.lendAsset = function lendAsset(request, callback) {
                        return this.rpcCall(lendAsset, $root.umeenetwork.umee.leverage.v1beta1.MsgLendAsset, $root.umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse, request, callback);
                    }, "name", { value: "LendAsset" });

                    /**
                     * Calls LendAsset.
                     * @function lendAsset
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLendAsset} request MsgLendAsset message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Msg#withdrawAsset}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @typedef WithdrawAssetCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse} [response] MsgWithdrawAssetResponse
                     */

                    /**
                     * Calls WithdrawAsset.
                     * @function withdrawAsset
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgWithdrawAsset} request MsgWithdrawAsset message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Msg.WithdrawAssetCallback} callback Node-style callback called with the error, if any, and MsgWithdrawAssetResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.withdrawAsset = function withdrawAsset(request, callback) {
                        return this.rpcCall(withdrawAsset, $root.umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset, $root.umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse, request, callback);
                    }, "name", { value: "WithdrawAsset" });

                    /**
                     * Calls WithdrawAsset.
                     * @function withdrawAsset
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgWithdrawAsset} request MsgWithdrawAsset message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Msg#setCollateral}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @typedef SetCollateralCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse} [response] MsgSetCollateralResponse
                     */

                    /**
                     * Calls SetCollateral.
                     * @function setCollateral
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgSetCollateral} request MsgSetCollateral message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Msg.SetCollateralCallback} callback Node-style callback called with the error, if any, and MsgSetCollateralResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.setCollateral = function setCollateral(request, callback) {
                        return this.rpcCall(setCollateral, $root.umeenetwork.umee.leverage.v1beta1.MsgSetCollateral, $root.umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse, request, callback);
                    }, "name", { value: "SetCollateral" });

                    /**
                     * Calls SetCollateral.
                     * @function setCollateral
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgSetCollateral} request MsgSetCollateral message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Msg#borrowAsset}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @typedef BorrowAssetCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse} [response] MsgBorrowAssetResponse
                     */

                    /**
                     * Calls BorrowAsset.
                     * @function borrowAsset
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgBorrowAsset} request MsgBorrowAsset message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Msg.BorrowAssetCallback} callback Node-style callback called with the error, if any, and MsgBorrowAssetResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.borrowAsset = function borrowAsset(request, callback) {
                        return this.rpcCall(borrowAsset, $root.umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset, $root.umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse, request, callback);
                    }, "name", { value: "BorrowAsset" });

                    /**
                     * Calls BorrowAsset.
                     * @function borrowAsset
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgBorrowAsset} request MsgBorrowAsset message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Msg#repayAsset}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @typedef RepayAssetCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse} [response] MsgRepayAssetResponse
                     */

                    /**
                     * Calls RepayAsset.
                     * @function repayAsset
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgRepayAsset} request MsgRepayAsset message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Msg.RepayAssetCallback} callback Node-style callback called with the error, if any, and MsgRepayAssetResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.repayAsset = function repayAsset(request, callback) {
                        return this.rpcCall(repayAsset, $root.umeenetwork.umee.leverage.v1beta1.MsgRepayAsset, $root.umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse, request, callback);
                    }, "name", { value: "RepayAsset" });

                    /**
                     * Calls RepayAsset.
                     * @function repayAsset
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgRepayAsset} request MsgRepayAsset message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Msg#liquidate}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @typedef LiquidateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse} [response] MsgLiquidateResponse
                     */

                    /**
                     * Calls Liquidate.
                     * @function liquidate
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLiquidate} request MsgLiquidate message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Msg.LiquidateCallback} callback Node-style callback called with the error, if any, and MsgLiquidateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.liquidate = function liquidate(request, callback) {
                        return this.rpcCall(liquidate, $root.umeenetwork.umee.leverage.v1beta1.MsgLiquidate, $root.umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse, request, callback);
                    }, "name", { value: "Liquidate" });

                    /**
                     * Calls Liquidate.
                     * @function liquidate
                     * @memberof umeenetwork.umee.leverage.v1beta1.Msg
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLiquidate} request MsgLiquidate message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse>} Promise
                     * @variation 2
                     */

                    return Msg;
                })();

                v1beta1.MsgLendAsset = (function() {

                    /**
                     * Properties of a MsgLendAsset.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IMsgLendAsset
                     * @property {string|null} [lender] MsgLendAsset lender
                     * @property {cosmos.base.v1beta1.ICoin|null} [amount] MsgLendAsset amount
                     */

                    /**
                     * Constructs a new MsgLendAsset.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a MsgLendAsset.
                     * @implements IMsgLendAsset
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLendAsset=} [properties] Properties to set
                     */
                    function MsgLendAsset(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgLendAsset lender.
                     * @member {string} lender
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAsset
                     * @instance
                     */
                    MsgLendAsset.prototype.lender = "";

                    /**
                     * MsgLendAsset amount.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAsset
                     * @instance
                     */
                    MsgLendAsset.prototype.amount = null;

                    /**
                     * Creates a new MsgLendAsset instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLendAsset=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLendAsset} MsgLendAsset instance
                     */
                    MsgLendAsset.create = function create(properties) {
                        return new MsgLendAsset(properties);
                    };

                    /**
                     * Encodes the specified MsgLendAsset message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgLendAsset.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLendAsset} message MsgLendAsset message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgLendAsset.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.lender != null && Object.hasOwnProperty.call(message, "lender"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.lender);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.amount, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgLendAsset message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgLendAsset.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLendAsset} message MsgLendAsset message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgLendAsset.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgLendAsset message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAsset
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLendAsset} MsgLendAsset
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgLendAsset.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.MsgLendAsset();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.lender = reader.string();
                                break;
                            case 2:
                                message.amount = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgLendAsset message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAsset
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLendAsset} MsgLendAsset
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgLendAsset.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgLendAsset message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAsset
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgLendAsset.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.lender != null && message.hasOwnProperty("lender"))
                            if (!$util.isString(message.lender))
                                return "lender: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a MsgLendAsset message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAsset
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLendAsset} MsgLendAsset
                     */
                    MsgLendAsset.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.MsgLendAsset)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.MsgLendAsset();
                        if (object.lender != null)
                            message.lender = String(object.lender);
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.MsgLendAsset.amount: object expected");
                            message.amount = $root.cosmos.base.v1beta1.Coin.fromObject(object.amount);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgLendAsset message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgLendAsset} message MsgLendAsset
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgLendAsset.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.lender = "";
                            object.amount = null;
                        }
                        if (message.lender != null && message.hasOwnProperty("lender"))
                            object.lender = message.lender;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.cosmos.base.v1beta1.Coin.toObject(message.amount, options);
                        return object;
                    };

                    /**
                     * Converts this MsgLendAsset to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAsset
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgLendAsset.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgLendAsset;
                })();

                v1beta1.MsgWithdrawAsset = (function() {

                    /**
                     * Properties of a MsgWithdrawAsset.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IMsgWithdrawAsset
                     * @property {string|null} [lender] MsgWithdrawAsset lender
                     * @property {cosmos.base.v1beta1.ICoin|null} [amount] MsgWithdrawAsset amount
                     */

                    /**
                     * Constructs a new MsgWithdrawAsset.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a MsgWithdrawAsset.
                     * @implements IMsgWithdrawAsset
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgWithdrawAsset=} [properties] Properties to set
                     */
                    function MsgWithdrawAsset(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgWithdrawAsset lender.
                     * @member {string} lender
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset
                     * @instance
                     */
                    MsgWithdrawAsset.prototype.lender = "";

                    /**
                     * MsgWithdrawAsset amount.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset
                     * @instance
                     */
                    MsgWithdrawAsset.prototype.amount = null;

                    /**
                     * Creates a new MsgWithdrawAsset instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgWithdrawAsset=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset} MsgWithdrawAsset instance
                     */
                    MsgWithdrawAsset.create = function create(properties) {
                        return new MsgWithdrawAsset(properties);
                    };

                    /**
                     * Encodes the specified MsgWithdrawAsset message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgWithdrawAsset} message MsgWithdrawAsset message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgWithdrawAsset.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.lender != null && Object.hasOwnProperty.call(message, "lender"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.lender);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.amount, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgWithdrawAsset message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgWithdrawAsset} message MsgWithdrawAsset message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgWithdrawAsset.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgWithdrawAsset message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset} MsgWithdrawAsset
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgWithdrawAsset.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.lender = reader.string();
                                break;
                            case 2:
                                message.amount = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgWithdrawAsset message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset} MsgWithdrawAsset
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgWithdrawAsset.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgWithdrawAsset message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgWithdrawAsset.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.lender != null && message.hasOwnProperty("lender"))
                            if (!$util.isString(message.lender))
                                return "lender: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a MsgWithdrawAsset message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset} MsgWithdrawAsset
                     */
                    MsgWithdrawAsset.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset();
                        if (object.lender != null)
                            message.lender = String(object.lender);
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset.amount: object expected");
                            message.amount = $root.cosmos.base.v1beta1.Coin.fromObject(object.amount);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgWithdrawAsset message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset} message MsgWithdrawAsset
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgWithdrawAsset.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.lender = "";
                            object.amount = null;
                        }
                        if (message.lender != null && message.hasOwnProperty("lender"))
                            object.lender = message.lender;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.cosmos.base.v1beta1.Coin.toObject(message.amount, options);
                        return object;
                    };

                    /**
                     * Converts this MsgWithdrawAsset to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAsset
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgWithdrawAsset.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgWithdrawAsset;
                })();

                v1beta1.MsgSetCollateral = (function() {

                    /**
                     * Properties of a MsgSetCollateral.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IMsgSetCollateral
                     * @property {string|null} [borrower] MsgSetCollateral borrower
                     * @property {string|null} [denom] MsgSetCollateral denom
                     * @property {boolean|null} [enable] MsgSetCollateral enable
                     */

                    /**
                     * Constructs a new MsgSetCollateral.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a MsgSetCollateral.
                     * @implements IMsgSetCollateral
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgSetCollateral=} [properties] Properties to set
                     */
                    function MsgSetCollateral(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgSetCollateral borrower.
                     * @member {string} borrower
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateral
                     * @instance
                     */
                    MsgSetCollateral.prototype.borrower = "";

                    /**
                     * MsgSetCollateral denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateral
                     * @instance
                     */
                    MsgSetCollateral.prototype.denom = "";

                    /**
                     * MsgSetCollateral enable.
                     * @member {boolean} enable
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateral
                     * @instance
                     */
                    MsgSetCollateral.prototype.enable = false;

                    /**
                     * Creates a new MsgSetCollateral instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateral
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgSetCollateral=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgSetCollateral} MsgSetCollateral instance
                     */
                    MsgSetCollateral.create = function create(properties) {
                        return new MsgSetCollateral(properties);
                    };

                    /**
                     * Encodes the specified MsgSetCollateral message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgSetCollateral.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateral
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgSetCollateral} message MsgSetCollateral message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSetCollateral.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.borrower != null && Object.hasOwnProperty.call(message, "borrower"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.borrower);
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.denom);
                        if (message.enable != null && Object.hasOwnProperty.call(message, "enable"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.enable);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgSetCollateral message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgSetCollateral.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateral
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgSetCollateral} message MsgSetCollateral message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSetCollateral.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgSetCollateral message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateral
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgSetCollateral} MsgSetCollateral
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSetCollateral.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.MsgSetCollateral();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.borrower = reader.string();
                                break;
                            case 2:
                                message.denom = reader.string();
                                break;
                            case 3:
                                message.enable = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgSetCollateral message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateral
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgSetCollateral} MsgSetCollateral
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSetCollateral.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgSetCollateral message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateral
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgSetCollateral.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.borrower != null && message.hasOwnProperty("borrower"))
                            if (!$util.isString(message.borrower))
                                return "borrower: string expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.enable != null && message.hasOwnProperty("enable"))
                            if (typeof message.enable !== "boolean")
                                return "enable: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a MsgSetCollateral message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateral
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgSetCollateral} MsgSetCollateral
                     */
                    MsgSetCollateral.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.MsgSetCollateral)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.MsgSetCollateral();
                        if (object.borrower != null)
                            message.borrower = String(object.borrower);
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.enable != null)
                            message.enable = Boolean(object.enable);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgSetCollateral message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateral
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgSetCollateral} message MsgSetCollateral
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgSetCollateral.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.borrower = "";
                            object.denom = "";
                            object.enable = false;
                        }
                        if (message.borrower != null && message.hasOwnProperty("borrower"))
                            object.borrower = message.borrower;
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.enable != null && message.hasOwnProperty("enable"))
                            object.enable = message.enable;
                        return object;
                    };

                    /**
                     * Converts this MsgSetCollateral to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateral
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgSetCollateral.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgSetCollateral;
                })();

                v1beta1.MsgBorrowAsset = (function() {

                    /**
                     * Properties of a MsgBorrowAsset.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IMsgBorrowAsset
                     * @property {string|null} [borrower] MsgBorrowAsset borrower
                     * @property {cosmos.base.v1beta1.ICoin|null} [amount] MsgBorrowAsset amount
                     */

                    /**
                     * Constructs a new MsgBorrowAsset.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a MsgBorrowAsset.
                     * @implements IMsgBorrowAsset
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgBorrowAsset=} [properties] Properties to set
                     */
                    function MsgBorrowAsset(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgBorrowAsset borrower.
                     * @member {string} borrower
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset
                     * @instance
                     */
                    MsgBorrowAsset.prototype.borrower = "";

                    /**
                     * MsgBorrowAsset amount.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset
                     * @instance
                     */
                    MsgBorrowAsset.prototype.amount = null;

                    /**
                     * Creates a new MsgBorrowAsset instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgBorrowAsset=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset} MsgBorrowAsset instance
                     */
                    MsgBorrowAsset.create = function create(properties) {
                        return new MsgBorrowAsset(properties);
                    };

                    /**
                     * Encodes the specified MsgBorrowAsset message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgBorrowAsset} message MsgBorrowAsset message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgBorrowAsset.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.borrower != null && Object.hasOwnProperty.call(message, "borrower"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.borrower);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.amount, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgBorrowAsset message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgBorrowAsset} message MsgBorrowAsset message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgBorrowAsset.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgBorrowAsset message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset} MsgBorrowAsset
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgBorrowAsset.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.borrower = reader.string();
                                break;
                            case 2:
                                message.amount = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgBorrowAsset message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset} MsgBorrowAsset
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgBorrowAsset.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgBorrowAsset message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgBorrowAsset.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.borrower != null && message.hasOwnProperty("borrower"))
                            if (!$util.isString(message.borrower))
                                return "borrower: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a MsgBorrowAsset message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset} MsgBorrowAsset
                     */
                    MsgBorrowAsset.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset();
                        if (object.borrower != null)
                            message.borrower = String(object.borrower);
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset.amount: object expected");
                            message.amount = $root.cosmos.base.v1beta1.Coin.fromObject(object.amount);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgBorrowAsset message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset} message MsgBorrowAsset
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgBorrowAsset.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.borrower = "";
                            object.amount = null;
                        }
                        if (message.borrower != null && message.hasOwnProperty("borrower"))
                            object.borrower = message.borrower;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.cosmos.base.v1beta1.Coin.toObject(message.amount, options);
                        return object;
                    };

                    /**
                     * Converts this MsgBorrowAsset to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAsset
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgBorrowAsset.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgBorrowAsset;
                })();

                v1beta1.MsgRepayAsset = (function() {

                    /**
                     * Properties of a MsgRepayAsset.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IMsgRepayAsset
                     * @property {string|null} [borrower] MsgRepayAsset borrower
                     * @property {cosmos.base.v1beta1.ICoin|null} [amount] MsgRepayAsset amount
                     */

                    /**
                     * Constructs a new MsgRepayAsset.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a MsgRepayAsset.
                     * @implements IMsgRepayAsset
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgRepayAsset=} [properties] Properties to set
                     */
                    function MsgRepayAsset(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgRepayAsset borrower.
                     * @member {string} borrower
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAsset
                     * @instance
                     */
                    MsgRepayAsset.prototype.borrower = "";

                    /**
                     * MsgRepayAsset amount.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAsset
                     * @instance
                     */
                    MsgRepayAsset.prototype.amount = null;

                    /**
                     * Creates a new MsgRepayAsset instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgRepayAsset=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgRepayAsset} MsgRepayAsset instance
                     */
                    MsgRepayAsset.create = function create(properties) {
                        return new MsgRepayAsset(properties);
                    };

                    /**
                     * Encodes the specified MsgRepayAsset message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgRepayAsset.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgRepayAsset} message MsgRepayAsset message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRepayAsset.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.borrower != null && Object.hasOwnProperty.call(message, "borrower"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.borrower);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.amount, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgRepayAsset message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgRepayAsset.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgRepayAsset} message MsgRepayAsset message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRepayAsset.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgRepayAsset message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAsset
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgRepayAsset} MsgRepayAsset
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRepayAsset.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.MsgRepayAsset();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.borrower = reader.string();
                                break;
                            case 2:
                                message.amount = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgRepayAsset message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAsset
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgRepayAsset} MsgRepayAsset
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRepayAsset.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgRepayAsset message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAsset
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgRepayAsset.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.borrower != null && message.hasOwnProperty("borrower"))
                            if (!$util.isString(message.borrower))
                                return "borrower: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a MsgRepayAsset message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAsset
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgRepayAsset} MsgRepayAsset
                     */
                    MsgRepayAsset.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.MsgRepayAsset)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.MsgRepayAsset();
                        if (object.borrower != null)
                            message.borrower = String(object.borrower);
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.MsgRepayAsset.amount: object expected");
                            message.amount = $root.cosmos.base.v1beta1.Coin.fromObject(object.amount);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgRepayAsset message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAsset
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgRepayAsset} message MsgRepayAsset
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgRepayAsset.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.borrower = "";
                            object.amount = null;
                        }
                        if (message.borrower != null && message.hasOwnProperty("borrower"))
                            object.borrower = message.borrower;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.cosmos.base.v1beta1.Coin.toObject(message.amount, options);
                        return object;
                    };

                    /**
                     * Converts this MsgRepayAsset to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAsset
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgRepayAsset.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgRepayAsset;
                })();

                v1beta1.MsgLiquidate = (function() {

                    /**
                     * Properties of a MsgLiquidate.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IMsgLiquidate
                     * @property {string|null} [liquidator] MsgLiquidate liquidator
                     * @property {string|null} [borrower] MsgLiquidate borrower
                     * @property {cosmos.base.v1beta1.ICoin|null} [repayment] MsgLiquidate repayment
                     * @property {cosmos.base.v1beta1.ICoin|null} [reward] MsgLiquidate reward
                     */

                    /**
                     * Constructs a new MsgLiquidate.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a MsgLiquidate.
                     * @implements IMsgLiquidate
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLiquidate=} [properties] Properties to set
                     */
                    function MsgLiquidate(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgLiquidate liquidator.
                     * @member {string} liquidator
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @instance
                     */
                    MsgLiquidate.prototype.liquidator = "";

                    /**
                     * MsgLiquidate borrower.
                     * @member {string} borrower
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @instance
                     */
                    MsgLiquidate.prototype.borrower = "";

                    /**
                     * MsgLiquidate repayment.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} repayment
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @instance
                     */
                    MsgLiquidate.prototype.repayment = null;

                    /**
                     * MsgLiquidate reward.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} reward
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @instance
                     */
                    MsgLiquidate.prototype.reward = null;

                    /**
                     * Creates a new MsgLiquidate instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLiquidate=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLiquidate} MsgLiquidate instance
                     */
                    MsgLiquidate.create = function create(properties) {
                        return new MsgLiquidate(properties);
                    };

                    /**
                     * Encodes the specified MsgLiquidate message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgLiquidate.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLiquidate} message MsgLiquidate message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgLiquidate.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.liquidator != null && Object.hasOwnProperty.call(message, "liquidator"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.liquidator);
                        if (message.borrower != null && Object.hasOwnProperty.call(message, "borrower"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.borrower);
                        if (message.repayment != null && Object.hasOwnProperty.call(message, "repayment"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.repayment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.reward != null && Object.hasOwnProperty.call(message, "reward"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.reward, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgLiquidate message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgLiquidate.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLiquidate} message MsgLiquidate message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgLiquidate.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgLiquidate message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLiquidate} MsgLiquidate
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgLiquidate.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.MsgLiquidate();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.liquidator = reader.string();
                                break;
                            case 2:
                                message.borrower = reader.string();
                                break;
                            case 3:
                                message.repayment = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.reward = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgLiquidate message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLiquidate} MsgLiquidate
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgLiquidate.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgLiquidate message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgLiquidate.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.liquidator != null && message.hasOwnProperty("liquidator"))
                            if (!$util.isString(message.liquidator))
                                return "liquidator: string expected";
                        if (message.borrower != null && message.hasOwnProperty("borrower"))
                            if (!$util.isString(message.borrower))
                                return "borrower: string expected";
                        if (message.repayment != null && message.hasOwnProperty("repayment")) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.repayment);
                            if (error)
                                return "repayment." + error;
                        }
                        if (message.reward != null && message.hasOwnProperty("reward")) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.reward);
                            if (error)
                                return "reward." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a MsgLiquidate message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLiquidate} MsgLiquidate
                     */
                    MsgLiquidate.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.MsgLiquidate)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.MsgLiquidate();
                        if (object.liquidator != null)
                            message.liquidator = String(object.liquidator);
                        if (object.borrower != null)
                            message.borrower = String(object.borrower);
                        if (object.repayment != null) {
                            if (typeof object.repayment !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.MsgLiquidate.repayment: object expected");
                            message.repayment = $root.cosmos.base.v1beta1.Coin.fromObject(object.repayment);
                        }
                        if (object.reward != null) {
                            if (typeof object.reward !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.MsgLiquidate.reward: object expected");
                            message.reward = $root.cosmos.base.v1beta1.Coin.fromObject(object.reward);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgLiquidate message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgLiquidate} message MsgLiquidate
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgLiquidate.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.liquidator = "";
                            object.borrower = "";
                            object.repayment = null;
                            object.reward = null;
                        }
                        if (message.liquidator != null && message.hasOwnProperty("liquidator"))
                            object.liquidator = message.liquidator;
                        if (message.borrower != null && message.hasOwnProperty("borrower"))
                            object.borrower = message.borrower;
                        if (message.repayment != null && message.hasOwnProperty("repayment"))
                            object.repayment = $root.cosmos.base.v1beta1.Coin.toObject(message.repayment, options);
                        if (message.reward != null && message.hasOwnProperty("reward"))
                            object.reward = $root.cosmos.base.v1beta1.Coin.toObject(message.reward, options);
                        return object;
                    };

                    /**
                     * Converts this MsgLiquidate to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidate
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgLiquidate.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgLiquidate;
                })();

                v1beta1.MsgLendAssetResponse = (function() {

                    /**
                     * Properties of a MsgLendAssetResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IMsgLendAssetResponse
                     */

                    /**
                     * Constructs a new MsgLendAssetResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a MsgLendAssetResponse.
                     * @implements IMsgLendAssetResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLendAssetResponse=} [properties] Properties to set
                     */
                    function MsgLendAssetResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new MsgLendAssetResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLendAssetResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse} MsgLendAssetResponse instance
                     */
                    MsgLendAssetResponse.create = function create(properties) {
                        return new MsgLendAssetResponse(properties);
                    };

                    /**
                     * Encodes the specified MsgLendAssetResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLendAssetResponse} message MsgLendAssetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgLendAssetResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgLendAssetResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLendAssetResponse} message MsgLendAssetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgLendAssetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgLendAssetResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse} MsgLendAssetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgLendAssetResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgLendAssetResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse} MsgLendAssetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgLendAssetResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgLendAssetResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgLendAssetResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgLendAssetResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse} MsgLendAssetResponse
                     */
                    MsgLendAssetResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse)
                            return object;
                        return new $root.umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse();
                    };

                    /**
                     * Creates a plain object from a MsgLendAssetResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse} message MsgLendAssetResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgLendAssetResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgLendAssetResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLendAssetResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgLendAssetResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgLendAssetResponse;
                })();

                v1beta1.MsgWithdrawAssetResponse = (function() {

                    /**
                     * Properties of a MsgWithdrawAssetResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IMsgWithdrawAssetResponse
                     */

                    /**
                     * Constructs a new MsgWithdrawAssetResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a MsgWithdrawAssetResponse.
                     * @implements IMsgWithdrawAssetResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgWithdrawAssetResponse=} [properties] Properties to set
                     */
                    function MsgWithdrawAssetResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new MsgWithdrawAssetResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgWithdrawAssetResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse} MsgWithdrawAssetResponse instance
                     */
                    MsgWithdrawAssetResponse.create = function create(properties) {
                        return new MsgWithdrawAssetResponse(properties);
                    };

                    /**
                     * Encodes the specified MsgWithdrawAssetResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgWithdrawAssetResponse} message MsgWithdrawAssetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgWithdrawAssetResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgWithdrawAssetResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgWithdrawAssetResponse} message MsgWithdrawAssetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgWithdrawAssetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgWithdrawAssetResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse} MsgWithdrawAssetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgWithdrawAssetResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgWithdrawAssetResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse} MsgWithdrawAssetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgWithdrawAssetResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgWithdrawAssetResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgWithdrawAssetResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgWithdrawAssetResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse} MsgWithdrawAssetResponse
                     */
                    MsgWithdrawAssetResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse)
                            return object;
                        return new $root.umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse();
                    };

                    /**
                     * Creates a plain object from a MsgWithdrawAssetResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse} message MsgWithdrawAssetResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgWithdrawAssetResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgWithdrawAssetResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgWithdrawAssetResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgWithdrawAssetResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgWithdrawAssetResponse;
                })();

                v1beta1.MsgSetCollateralResponse = (function() {

                    /**
                     * Properties of a MsgSetCollateralResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IMsgSetCollateralResponse
                     */

                    /**
                     * Constructs a new MsgSetCollateralResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a MsgSetCollateralResponse.
                     * @implements IMsgSetCollateralResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgSetCollateralResponse=} [properties] Properties to set
                     */
                    function MsgSetCollateralResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new MsgSetCollateralResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgSetCollateralResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse} MsgSetCollateralResponse instance
                     */
                    MsgSetCollateralResponse.create = function create(properties) {
                        return new MsgSetCollateralResponse(properties);
                    };

                    /**
                     * Encodes the specified MsgSetCollateralResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgSetCollateralResponse} message MsgSetCollateralResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSetCollateralResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgSetCollateralResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgSetCollateralResponse} message MsgSetCollateralResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSetCollateralResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgSetCollateralResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse} MsgSetCollateralResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSetCollateralResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgSetCollateralResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse} MsgSetCollateralResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSetCollateralResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgSetCollateralResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgSetCollateralResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgSetCollateralResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse} MsgSetCollateralResponse
                     */
                    MsgSetCollateralResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse)
                            return object;
                        return new $root.umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse();
                    };

                    /**
                     * Creates a plain object from a MsgSetCollateralResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse} message MsgSetCollateralResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgSetCollateralResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgSetCollateralResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgSetCollateralResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgSetCollateralResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgSetCollateralResponse;
                })();

                v1beta1.MsgBorrowAssetResponse = (function() {

                    /**
                     * Properties of a MsgBorrowAssetResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IMsgBorrowAssetResponse
                     */

                    /**
                     * Constructs a new MsgBorrowAssetResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a MsgBorrowAssetResponse.
                     * @implements IMsgBorrowAssetResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgBorrowAssetResponse=} [properties] Properties to set
                     */
                    function MsgBorrowAssetResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new MsgBorrowAssetResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgBorrowAssetResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse} MsgBorrowAssetResponse instance
                     */
                    MsgBorrowAssetResponse.create = function create(properties) {
                        return new MsgBorrowAssetResponse(properties);
                    };

                    /**
                     * Encodes the specified MsgBorrowAssetResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgBorrowAssetResponse} message MsgBorrowAssetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgBorrowAssetResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgBorrowAssetResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgBorrowAssetResponse} message MsgBorrowAssetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgBorrowAssetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgBorrowAssetResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse} MsgBorrowAssetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgBorrowAssetResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgBorrowAssetResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse} MsgBorrowAssetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgBorrowAssetResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgBorrowAssetResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgBorrowAssetResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgBorrowAssetResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse} MsgBorrowAssetResponse
                     */
                    MsgBorrowAssetResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse)
                            return object;
                        return new $root.umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse();
                    };

                    /**
                     * Creates a plain object from a MsgBorrowAssetResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse} message MsgBorrowAssetResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgBorrowAssetResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgBorrowAssetResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgBorrowAssetResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgBorrowAssetResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgBorrowAssetResponse;
                })();

                v1beta1.MsgRepayAssetResponse = (function() {

                    /**
                     * Properties of a MsgRepayAssetResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IMsgRepayAssetResponse
                     * @property {cosmos.base.v1beta1.ICoin|null} [repaid] MsgRepayAssetResponse repaid
                     */

                    /**
                     * Constructs a new MsgRepayAssetResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a MsgRepayAssetResponse.
                     * @implements IMsgRepayAssetResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgRepayAssetResponse=} [properties] Properties to set
                     */
                    function MsgRepayAssetResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgRepayAssetResponse repaid.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} repaid
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse
                     * @instance
                     */
                    MsgRepayAssetResponse.prototype.repaid = null;

                    /**
                     * Creates a new MsgRepayAssetResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgRepayAssetResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse} MsgRepayAssetResponse instance
                     */
                    MsgRepayAssetResponse.create = function create(properties) {
                        return new MsgRepayAssetResponse(properties);
                    };

                    /**
                     * Encodes the specified MsgRepayAssetResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgRepayAssetResponse} message MsgRepayAssetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRepayAssetResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.repaid != null && Object.hasOwnProperty.call(message, "repaid"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.repaid, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgRepayAssetResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgRepayAssetResponse} message MsgRepayAssetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRepayAssetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgRepayAssetResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse} MsgRepayAssetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRepayAssetResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.repaid = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgRepayAssetResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse} MsgRepayAssetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRepayAssetResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgRepayAssetResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgRepayAssetResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.repaid != null && message.hasOwnProperty("repaid")) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.repaid);
                            if (error)
                                return "repaid." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a MsgRepayAssetResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse} MsgRepayAssetResponse
                     */
                    MsgRepayAssetResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse();
                        if (object.repaid != null) {
                            if (typeof object.repaid !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse.repaid: object expected");
                            message.repaid = $root.cosmos.base.v1beta1.Coin.fromObject(object.repaid);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgRepayAssetResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse} message MsgRepayAssetResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgRepayAssetResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.repaid = null;
                        if (message.repaid != null && message.hasOwnProperty("repaid"))
                            object.repaid = $root.cosmos.base.v1beta1.Coin.toObject(message.repaid, options);
                        return object;
                    };

                    /**
                     * Converts this MsgRepayAssetResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgRepayAssetResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgRepayAssetResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgRepayAssetResponse;
                })();

                v1beta1.MsgLiquidateResponse = (function() {

                    /**
                     * Properties of a MsgLiquidateResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IMsgLiquidateResponse
                     * @property {cosmos.base.v1beta1.ICoin|null} [repaid] MsgLiquidateResponse repaid
                     * @property {cosmos.base.v1beta1.ICoin|null} [reward] MsgLiquidateResponse reward
                     */

                    /**
                     * Constructs a new MsgLiquidateResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a MsgLiquidateResponse.
                     * @implements IMsgLiquidateResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLiquidateResponse=} [properties] Properties to set
                     */
                    function MsgLiquidateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgLiquidateResponse repaid.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} repaid
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse
                     * @instance
                     */
                    MsgLiquidateResponse.prototype.repaid = null;

                    /**
                     * MsgLiquidateResponse reward.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} reward
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse
                     * @instance
                     */
                    MsgLiquidateResponse.prototype.reward = null;

                    /**
                     * Creates a new MsgLiquidateResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLiquidateResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse} MsgLiquidateResponse instance
                     */
                    MsgLiquidateResponse.create = function create(properties) {
                        return new MsgLiquidateResponse(properties);
                    };

                    /**
                     * Encodes the specified MsgLiquidateResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLiquidateResponse} message MsgLiquidateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgLiquidateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.repaid != null && Object.hasOwnProperty.call(message, "repaid"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.repaid, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.reward != null && Object.hasOwnProperty.call(message, "reward"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.reward, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgLiquidateResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IMsgLiquidateResponse} message MsgLiquidateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgLiquidateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgLiquidateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse} MsgLiquidateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgLiquidateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.repaid = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.reward = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgLiquidateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse} MsgLiquidateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgLiquidateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgLiquidateResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgLiquidateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.repaid != null && message.hasOwnProperty("repaid")) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.repaid);
                            if (error)
                                return "repaid." + error;
                        }
                        if (message.reward != null && message.hasOwnProperty("reward")) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.reward);
                            if (error)
                                return "reward." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a MsgLiquidateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse} MsgLiquidateResponse
                     */
                    MsgLiquidateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse();
                        if (object.repaid != null) {
                            if (typeof object.repaid !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse.repaid: object expected");
                            message.repaid = $root.cosmos.base.v1beta1.Coin.fromObject(object.repaid);
                        }
                        if (object.reward != null) {
                            if (typeof object.reward !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse.reward: object expected");
                            message.reward = $root.cosmos.base.v1beta1.Coin.fromObject(object.reward);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgLiquidateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse} message MsgLiquidateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgLiquidateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.repaid = null;
                            object.reward = null;
                        }
                        if (message.repaid != null && message.hasOwnProperty("repaid"))
                            object.repaid = $root.cosmos.base.v1beta1.Coin.toObject(message.repaid, options);
                        if (message.reward != null && message.hasOwnProperty("reward"))
                            object.reward = $root.cosmos.base.v1beta1.Coin.toObject(message.reward, options);
                        return object;
                    };

                    /**
                     * Converts this MsgLiquidateResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.MsgLiquidateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgLiquidateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgLiquidateResponse;
                })();

                v1beta1.UpdateRegistryProposal = (function() {

                    /**
                     * Properties of an UpdateRegistryProposal.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IUpdateRegistryProposal
                     * @property {string|null} [title] UpdateRegistryProposal title
                     * @property {string|null} [description] UpdateRegistryProposal description
                     * @property {Array.<umeenetwork.umee.leverage.v1beta1.IToken>|null} [registry] UpdateRegistryProposal registry
                     */

                    /**
                     * Constructs a new UpdateRegistryProposal.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents an UpdateRegistryProposal.
                     * @implements IUpdateRegistryProposal
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IUpdateRegistryProposal=} [properties] Properties to set
                     */
                    function UpdateRegistryProposal(properties) {
                        this.registry = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * UpdateRegistryProposal title.
                     * @member {string} title
                     * @memberof umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal
                     * @instance
                     */
                    UpdateRegistryProposal.prototype.title = "";

                    /**
                     * UpdateRegistryProposal description.
                     * @member {string} description
                     * @memberof umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal
                     * @instance
                     */
                    UpdateRegistryProposal.prototype.description = "";

                    /**
                     * UpdateRegistryProposal registry.
                     * @member {Array.<umeenetwork.umee.leverage.v1beta1.IToken>} registry
                     * @memberof umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal
                     * @instance
                     */
                    UpdateRegistryProposal.prototype.registry = $util.emptyArray;

                    /**
                     * Creates a new UpdateRegistryProposal instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IUpdateRegistryProposal=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal} UpdateRegistryProposal instance
                     */
                    UpdateRegistryProposal.create = function create(properties) {
                        return new UpdateRegistryProposal(properties);
                    };

                    /**
                     * Encodes the specified UpdateRegistryProposal message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IUpdateRegistryProposal} message UpdateRegistryProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateRegistryProposal.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        if (message.registry != null && message.registry.length)
                            for (let i = 0; i < message.registry.length; ++i)
                                $root.umeenetwork.umee.leverage.v1beta1.Token.encode(message.registry[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified UpdateRegistryProposal message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IUpdateRegistryProposal} message UpdateRegistryProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateRegistryProposal.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an UpdateRegistryProposal message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal} UpdateRegistryProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateRegistryProposal.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.title = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            case 3:
                                if (!(message.registry && message.registry.length))
                                    message.registry = [];
                                message.registry.push($root.umeenetwork.umee.leverage.v1beta1.Token.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an UpdateRegistryProposal message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal} UpdateRegistryProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateRegistryProposal.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an UpdateRegistryProposal message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateRegistryProposal.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.title != null && message.hasOwnProperty("title"))
                            if (!$util.isString(message.title))
                                return "title: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.registry != null && message.hasOwnProperty("registry")) {
                            if (!Array.isArray(message.registry))
                                return "registry: array expected";
                            for (let i = 0; i < message.registry.length; ++i) {
                                let error = $root.umeenetwork.umee.leverage.v1beta1.Token.verify(message.registry[i]);
                                if (error)
                                    return "registry." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an UpdateRegistryProposal message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal} UpdateRegistryProposal
                     */
                    UpdateRegistryProposal.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal();
                        if (object.title != null)
                            message.title = String(object.title);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.registry) {
                            if (!Array.isArray(object.registry))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal.registry: array expected");
                            message.registry = [];
                            for (let i = 0; i < object.registry.length; ++i) {
                                if (typeof object.registry[i] !== "object")
                                    throw TypeError(".umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal.registry: object expected");
                                message.registry[i] = $root.umeenetwork.umee.leverage.v1beta1.Token.fromObject(object.registry[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an UpdateRegistryProposal message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal} message UpdateRegistryProposal
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateRegistryProposal.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.registry = [];
                        if (options.defaults) {
                            object.title = "";
                            object.description = "";
                        }
                        if (message.title != null && message.hasOwnProperty("title"))
                            object.title = message.title;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.registry && message.registry.length) {
                            object.registry = [];
                            for (let j = 0; j < message.registry.length; ++j)
                                object.registry[j] = $root.umeenetwork.umee.leverage.v1beta1.Token.toObject(message.registry[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this UpdateRegistryProposal to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.UpdateRegistryProposal
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateRegistryProposal.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return UpdateRegistryProposal;
                })();

                v1beta1.Params = (function() {

                    /**
                     * Properties of a Params.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IParams
                     * @property {string|null} [completeLiquidationThreshold] Params completeLiquidationThreshold
                     * @property {string|null} [minimumCloseFactor] Params minimumCloseFactor
                     * @property {string|null} [oracleRewardFactor] Params oracleRewardFactor
                     */

                    /**
                     * Constructs a new Params.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a Params.
                     * @implements IParams
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IParams=} [properties] Properties to set
                     */
                    function Params(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Params completeLiquidationThreshold.
                     * @member {string} completeLiquidationThreshold
                     * @memberof umeenetwork.umee.leverage.v1beta1.Params
                     * @instance
                     */
                    Params.prototype.completeLiquidationThreshold = "";

                    /**
                     * Params minimumCloseFactor.
                     * @member {string} minimumCloseFactor
                     * @memberof umeenetwork.umee.leverage.v1beta1.Params
                     * @instance
                     */
                    Params.prototype.minimumCloseFactor = "";

                    /**
                     * Params oracleRewardFactor.
                     * @member {string} oracleRewardFactor
                     * @memberof umeenetwork.umee.leverage.v1beta1.Params
                     * @instance
                     */
                    Params.prototype.oracleRewardFactor = "";

                    /**
                     * Creates a new Params instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.Params
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IParams=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.Params} Params instance
                     */
                    Params.create = function create(properties) {
                        return new Params(properties);
                    };

                    /**
                     * Encodes the specified Params message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.Params.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.Params
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.completeLiquidationThreshold != null && Object.hasOwnProperty.call(message, "completeLiquidationThreshold"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.completeLiquidationThreshold);
                        if (message.minimumCloseFactor != null && Object.hasOwnProperty.call(message, "minimumCloseFactor"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.minimumCloseFactor);
                        if (message.oracleRewardFactor != null && Object.hasOwnProperty.call(message, "oracleRewardFactor"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.oracleRewardFactor);
                        return writer;
                    };

                    /**
                     * Encodes the specified Params message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.Params.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.Params
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.Params();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 2:
                                message.completeLiquidationThreshold = reader.string();
                                break;
                            case 3:
                                message.minimumCloseFactor = reader.string();
                                break;
                            case 4:
                                message.oracleRewardFactor = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Params message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.Params
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Params.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.completeLiquidationThreshold != null && message.hasOwnProperty("completeLiquidationThreshold"))
                            if (!$util.isString(message.completeLiquidationThreshold))
                                return "completeLiquidationThreshold: string expected";
                        if (message.minimumCloseFactor != null && message.hasOwnProperty("minimumCloseFactor"))
                            if (!$util.isString(message.minimumCloseFactor))
                                return "minimumCloseFactor: string expected";
                        if (message.oracleRewardFactor != null && message.hasOwnProperty("oracleRewardFactor"))
                            if (!$util.isString(message.oracleRewardFactor))
                                return "oracleRewardFactor: string expected";
                        return null;
                    };

                    /**
                     * Creates a Params message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.Params
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.Params} Params
                     */
                    Params.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.Params)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.Params();
                        if (object.completeLiquidationThreshold != null)
                            message.completeLiquidationThreshold = String(object.completeLiquidationThreshold);
                        if (object.minimumCloseFactor != null)
                            message.minimumCloseFactor = String(object.minimumCloseFactor);
                        if (object.oracleRewardFactor != null)
                            message.oracleRewardFactor = String(object.oracleRewardFactor);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Params message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.Params
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.Params} message Params
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Params.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.completeLiquidationThreshold = "";
                            object.minimumCloseFactor = "";
                            object.oracleRewardFactor = "";
                        }
                        if (message.completeLiquidationThreshold != null && message.hasOwnProperty("completeLiquidationThreshold"))
                            object.completeLiquidationThreshold = message.completeLiquidationThreshold;
                        if (message.minimumCloseFactor != null && message.hasOwnProperty("minimumCloseFactor"))
                            object.minimumCloseFactor = message.minimumCloseFactor;
                        if (message.oracleRewardFactor != null && message.hasOwnProperty("oracleRewardFactor"))
                            object.oracleRewardFactor = message.oracleRewardFactor;
                        return object;
                    };

                    /**
                     * Converts this Params to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.Params
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Params.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Params;
                })();

                v1beta1.Token = (function() {

                    /**
                     * Properties of a Token.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IToken
                     * @property {string|null} [baseDenom] Token baseDenom
                     * @property {string|null} [reserveFactor] Token reserveFactor
                     * @property {string|null} [collateralWeight] Token collateralWeight
                     * @property {string|null} [baseBorrowRate] Token baseBorrowRate
                     * @property {string|null} [kinkBorrowRate] Token kinkBorrowRate
                     * @property {string|null} [maxBorrowRate] Token maxBorrowRate
                     * @property {string|null} [kinkUtilizationRate] Token kinkUtilizationRate
                     * @property {string|null} [liquidationIncentive] Token liquidationIncentive
                     * @property {string|null} [symbolDenom] Token symbolDenom
                     * @property {number|null} [exponent] Token exponent
                     */

                    /**
                     * Constructs a new Token.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a Token.
                     * @implements IToken
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IToken=} [properties] Properties to set
                     */
                    function Token(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Token baseDenom.
                     * @member {string} baseDenom
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @instance
                     */
                    Token.prototype.baseDenom = "";

                    /**
                     * Token reserveFactor.
                     * @member {string} reserveFactor
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @instance
                     */
                    Token.prototype.reserveFactor = "";

                    /**
                     * Token collateralWeight.
                     * @member {string} collateralWeight
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @instance
                     */
                    Token.prototype.collateralWeight = "";

                    /**
                     * Token baseBorrowRate.
                     * @member {string} baseBorrowRate
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @instance
                     */
                    Token.prototype.baseBorrowRate = "";

                    /**
                     * Token kinkBorrowRate.
                     * @member {string} kinkBorrowRate
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @instance
                     */
                    Token.prototype.kinkBorrowRate = "";

                    /**
                     * Token maxBorrowRate.
                     * @member {string} maxBorrowRate
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @instance
                     */
                    Token.prototype.maxBorrowRate = "";

                    /**
                     * Token kinkUtilizationRate.
                     * @member {string} kinkUtilizationRate
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @instance
                     */
                    Token.prototype.kinkUtilizationRate = "";

                    /**
                     * Token liquidationIncentive.
                     * @member {string} liquidationIncentive
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @instance
                     */
                    Token.prototype.liquidationIncentive = "";

                    /**
                     * Token symbolDenom.
                     * @member {string} symbolDenom
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @instance
                     */
                    Token.prototype.symbolDenom = "";

                    /**
                     * Token exponent.
                     * @member {number} exponent
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @instance
                     */
                    Token.prototype.exponent = 0;

                    /**
                     * Creates a new Token instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IToken=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.Token} Token instance
                     */
                    Token.create = function create(properties) {
                        return new Token(properties);
                    };

                    /**
                     * Encodes the specified Token message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.Token.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IToken} message Token message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Token.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.baseDenom != null && Object.hasOwnProperty.call(message, "baseDenom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.baseDenom);
                        if (message.reserveFactor != null && Object.hasOwnProperty.call(message, "reserveFactor"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.reserveFactor);
                        if (message.collateralWeight != null && Object.hasOwnProperty.call(message, "collateralWeight"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.collateralWeight);
                        if (message.baseBorrowRate != null && Object.hasOwnProperty.call(message, "baseBorrowRate"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.baseBorrowRate);
                        if (message.kinkBorrowRate != null && Object.hasOwnProperty.call(message, "kinkBorrowRate"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.kinkBorrowRate);
                        if (message.maxBorrowRate != null && Object.hasOwnProperty.call(message, "maxBorrowRate"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.maxBorrowRate);
                        if (message.kinkUtilizationRate != null && Object.hasOwnProperty.call(message, "kinkUtilizationRate"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.kinkUtilizationRate);
                        if (message.liquidationIncentive != null && Object.hasOwnProperty.call(message, "liquidationIncentive"))
                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.liquidationIncentive);
                        if (message.symbolDenom != null && Object.hasOwnProperty.call(message, "symbolDenom"))
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.symbolDenom);
                        if (message.exponent != null && Object.hasOwnProperty.call(message, "exponent"))
                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.exponent);
                        return writer;
                    };

                    /**
                     * Encodes the specified Token message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.Token.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IToken} message Token message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Token.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Token message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.Token} Token
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Token.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.Token();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.baseDenom = reader.string();
                                break;
                            case 2:
                                message.reserveFactor = reader.string();
                                break;
                            case 3:
                                message.collateralWeight = reader.string();
                                break;
                            case 4:
                                message.baseBorrowRate = reader.string();
                                break;
                            case 5:
                                message.kinkBorrowRate = reader.string();
                                break;
                            case 6:
                                message.maxBorrowRate = reader.string();
                                break;
                            case 7:
                                message.kinkUtilizationRate = reader.string();
                                break;
                            case 8:
                                message.liquidationIncentive = reader.string();
                                break;
                            case 9:
                                message.symbolDenom = reader.string();
                                break;
                            case 10:
                                message.exponent = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Token message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.Token} Token
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Token.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Token message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Token.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.baseDenom != null && message.hasOwnProperty("baseDenom"))
                            if (!$util.isString(message.baseDenom))
                                return "baseDenom: string expected";
                        if (message.reserveFactor != null && message.hasOwnProperty("reserveFactor"))
                            if (!$util.isString(message.reserveFactor))
                                return "reserveFactor: string expected";
                        if (message.collateralWeight != null && message.hasOwnProperty("collateralWeight"))
                            if (!$util.isString(message.collateralWeight))
                                return "collateralWeight: string expected";
                        if (message.baseBorrowRate != null && message.hasOwnProperty("baseBorrowRate"))
                            if (!$util.isString(message.baseBorrowRate))
                                return "baseBorrowRate: string expected";
                        if (message.kinkBorrowRate != null && message.hasOwnProperty("kinkBorrowRate"))
                            if (!$util.isString(message.kinkBorrowRate))
                                return "kinkBorrowRate: string expected";
                        if (message.maxBorrowRate != null && message.hasOwnProperty("maxBorrowRate"))
                            if (!$util.isString(message.maxBorrowRate))
                                return "maxBorrowRate: string expected";
                        if (message.kinkUtilizationRate != null && message.hasOwnProperty("kinkUtilizationRate"))
                            if (!$util.isString(message.kinkUtilizationRate))
                                return "kinkUtilizationRate: string expected";
                        if (message.liquidationIncentive != null && message.hasOwnProperty("liquidationIncentive"))
                            if (!$util.isString(message.liquidationIncentive))
                                return "liquidationIncentive: string expected";
                        if (message.symbolDenom != null && message.hasOwnProperty("symbolDenom"))
                            if (!$util.isString(message.symbolDenom))
                                return "symbolDenom: string expected";
                        if (message.exponent != null && message.hasOwnProperty("exponent"))
                            if (!$util.isInteger(message.exponent))
                                return "exponent: integer expected";
                        return null;
                    };

                    /**
                     * Creates a Token message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.Token} Token
                     */
                    Token.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.Token)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.Token();
                        if (object.baseDenom != null)
                            message.baseDenom = String(object.baseDenom);
                        if (object.reserveFactor != null)
                            message.reserveFactor = String(object.reserveFactor);
                        if (object.collateralWeight != null)
                            message.collateralWeight = String(object.collateralWeight);
                        if (object.baseBorrowRate != null)
                            message.baseBorrowRate = String(object.baseBorrowRate);
                        if (object.kinkBorrowRate != null)
                            message.kinkBorrowRate = String(object.kinkBorrowRate);
                        if (object.maxBorrowRate != null)
                            message.maxBorrowRate = String(object.maxBorrowRate);
                        if (object.kinkUtilizationRate != null)
                            message.kinkUtilizationRate = String(object.kinkUtilizationRate);
                        if (object.liquidationIncentive != null)
                            message.liquidationIncentive = String(object.liquidationIncentive);
                        if (object.symbolDenom != null)
                            message.symbolDenom = String(object.symbolDenom);
                        if (object.exponent != null)
                            message.exponent = object.exponent >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a Token message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.Token} message Token
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Token.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.baseDenom = "";
                            object.reserveFactor = "";
                            object.collateralWeight = "";
                            object.baseBorrowRate = "";
                            object.kinkBorrowRate = "";
                            object.maxBorrowRate = "";
                            object.kinkUtilizationRate = "";
                            object.liquidationIncentive = "";
                            object.symbolDenom = "";
                            object.exponent = 0;
                        }
                        if (message.baseDenom != null && message.hasOwnProperty("baseDenom"))
                            object.baseDenom = message.baseDenom;
                        if (message.reserveFactor != null && message.hasOwnProperty("reserveFactor"))
                            object.reserveFactor = message.reserveFactor;
                        if (message.collateralWeight != null && message.hasOwnProperty("collateralWeight"))
                            object.collateralWeight = message.collateralWeight;
                        if (message.baseBorrowRate != null && message.hasOwnProperty("baseBorrowRate"))
                            object.baseBorrowRate = message.baseBorrowRate;
                        if (message.kinkBorrowRate != null && message.hasOwnProperty("kinkBorrowRate"))
                            object.kinkBorrowRate = message.kinkBorrowRate;
                        if (message.maxBorrowRate != null && message.hasOwnProperty("maxBorrowRate"))
                            object.maxBorrowRate = message.maxBorrowRate;
                        if (message.kinkUtilizationRate != null && message.hasOwnProperty("kinkUtilizationRate"))
                            object.kinkUtilizationRate = message.kinkUtilizationRate;
                        if (message.liquidationIncentive != null && message.hasOwnProperty("liquidationIncentive"))
                            object.liquidationIncentive = message.liquidationIncentive;
                        if (message.symbolDenom != null && message.hasOwnProperty("symbolDenom"))
                            object.symbolDenom = message.symbolDenom;
                        if (message.exponent != null && message.hasOwnProperty("exponent"))
                            object.exponent = message.exponent;
                        return object;
                    };

                    /**
                     * Converts this Token to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.Token
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Token.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Token;
                })();

                v1beta1.Query = (function() {

                    /**
                     * Constructs a new Query service.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                    /**
                     * Creates new Query service using the specified rpc implementation.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Query} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Query.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#registeredTokens}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef RegisteredTokensCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse} [response] QueryRegisteredTokensResponse
                     */

                    /**
                     * Calls RegisteredTokens.
                     * @function registeredTokens
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryRegisteredTokens} request QueryRegisteredTokens message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.RegisteredTokensCallback} callback Node-style callback called with the error, if any, and QueryRegisteredTokensResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.registeredTokens = function registeredTokens(request, callback) {
                        return this.rpcCall(registeredTokens, $root.umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens, $root.umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse, request, callback);
                    }, "name", { value: "RegisteredTokens" });

                    /**
                     * Calls RegisteredTokens.
                     * @function registeredTokens
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryRegisteredTokens} request QueryRegisteredTokens message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#params}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef ParamsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryParamsResponse} [response] QueryParamsResponse
                     */

                    /**
                     * Calls Params.
                     * @function params
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.params = function params(request, callback) {
                        return this.rpcCall(params, $root.umeenetwork.umee.leverage.v1beta1.QueryParamsRequest, $root.umeenetwork.umee.leverage.v1beta1.QueryParamsResponse, request, callback);
                    }, "name", { value: "Params" });

                    /**
                     * Calls Params.
                     * @function params
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryParamsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#borrowed}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef BorrowedCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse} [response] QueryBorrowedResponse
                     */

                    /**
                     * Calls Borrowed.
                     * @function borrowed
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowedRequest} request QueryBorrowedRequest message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.BorrowedCallback} callback Node-style callback called with the error, if any, and QueryBorrowedResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.borrowed = function borrowed(request, callback) {
                        return this.rpcCall(borrowed, $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest, $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse, request, callback);
                    }, "name", { value: "Borrowed" });

                    /**
                     * Calls Borrowed.
                     * @function borrowed
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowedRequest} request QueryBorrowedRequest message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#availableBorrow}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef AvailableBorrowCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse} [response] QueryAvailableBorrowResponse
                     */

                    /**
                     * Calls AvailableBorrow.
                     * @function availableBorrow
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryAvailableBorrowRequest} request QueryAvailableBorrowRequest message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.AvailableBorrowCallback} callback Node-style callback called with the error, if any, and QueryAvailableBorrowResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.availableBorrow = function availableBorrow(request, callback) {
                        return this.rpcCall(availableBorrow, $root.umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest, $root.umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse, request, callback);
                    }, "name", { value: "AvailableBorrow" });

                    /**
                     * Calls AvailableBorrow.
                     * @function availableBorrow
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryAvailableBorrowRequest} request QueryAvailableBorrowRequest message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#borrowAPY}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef BorrowAPYCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse} [response] QueryBorrowAPYResponse
                     */

                    /**
                     * Calls BorrowAPY.
                     * @function borrowAPY
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowAPYRequest} request QueryBorrowAPYRequest message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.BorrowAPYCallback} callback Node-style callback called with the error, if any, and QueryBorrowAPYResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.borrowAPY = function borrowAPY(request, callback) {
                        return this.rpcCall(borrowAPY, $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest, $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse, request, callback);
                    }, "name", { value: "BorrowAPY" });

                    /**
                     * Calls BorrowAPY.
                     * @function borrowAPY
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowAPYRequest} request QueryBorrowAPYRequest message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#lendAPY}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef LendAPYCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse} [response] QueryLendAPYResponse
                     */

                    /**
                     * Calls LendAPY.
                     * @function lendAPY
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLendAPYRequest} request QueryLendAPYRequest message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.LendAPYCallback} callback Node-style callback called with the error, if any, and QueryLendAPYResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.lendAPY = function lendAPY(request, callback) {
                        return this.rpcCall(lendAPY, $root.umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest, $root.umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse, request, callback);
                    }, "name", { value: "LendAPY" });

                    /**
                     * Calls LendAPY.
                     * @function lendAPY
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLendAPYRequest} request QueryLendAPYRequest message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#marketSize}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef MarketSizeCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse} [response] QueryMarketSizeResponse
                     */

                    /**
                     * Calls MarketSize.
                     * @function marketSize
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryMarketSizeRequest} request QueryMarketSizeRequest message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.MarketSizeCallback} callback Node-style callback called with the error, if any, and QueryMarketSizeResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.marketSize = function marketSize(request, callback) {
                        return this.rpcCall(marketSize, $root.umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest, $root.umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse, request, callback);
                    }, "name", { value: "MarketSize" });

                    /**
                     * Calls MarketSize.
                     * @function marketSize
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryMarketSizeRequest} request QueryMarketSizeRequest message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#reserveAmount}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef ReserveAmountCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse} [response] QueryReserveAmountResponse
                     */

                    /**
                     * Calls ReserveAmount.
                     * @function reserveAmount
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryReserveAmountRequest} request QueryReserveAmountRequest message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.ReserveAmountCallback} callback Node-style callback called with the error, if any, and QueryReserveAmountResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.reserveAmount = function reserveAmount(request, callback) {
                        return this.rpcCall(reserveAmount, $root.umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest, $root.umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse, request, callback);
                    }, "name", { value: "ReserveAmount" });

                    /**
                     * Calls ReserveAmount.
                     * @function reserveAmount
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryReserveAmountRequest} request QueryReserveAmountRequest message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#collateralSetting}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef CollateralSettingCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse} [response] QueryCollateralSettingResponse
                     */

                    /**
                     * Calls CollateralSetting.
                     * @function collateralSetting
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralSettingRequest} request QueryCollateralSettingRequest message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.CollateralSettingCallback} callback Node-style callback called with the error, if any, and QueryCollateralSettingResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.collateralSetting = function collateralSetting(request, callback) {
                        return this.rpcCall(collateralSetting, $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest, $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse, request, callback);
                    }, "name", { value: "CollateralSetting" });

                    /**
                     * Calls CollateralSetting.
                     * @function collateralSetting
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralSettingRequest} request QueryCollateralSettingRequest message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#collateral}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef CollateralCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse} [response] QueryCollateralResponse
                     */

                    /**
                     * Calls Collateral.
                     * @function collateral
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralRequest} request QueryCollateralRequest message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.CollateralCallback} callback Node-style callback called with the error, if any, and QueryCollateralResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.collateral = function collateral(request, callback) {
                        return this.rpcCall(collateral, $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest, $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse, request, callback);
                    }, "name", { value: "Collateral" });

                    /**
                     * Calls Collateral.
                     * @function collateral
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralRequest} request QueryCollateralRequest message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#exchangeRate}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef ExchangeRateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse} [response] QueryExchangeRateResponse
                     */

                    /**
                     * Calls ExchangeRate.
                     * @function exchangeRate
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryExchangeRateRequest} request QueryExchangeRateRequest message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.ExchangeRateCallback} callback Node-style callback called with the error, if any, and QueryExchangeRateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.exchangeRate = function exchangeRate(request, callback) {
                        return this.rpcCall(exchangeRate, $root.umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest, $root.umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse, request, callback);
                    }, "name", { value: "ExchangeRate" });

                    /**
                     * Calls ExchangeRate.
                     * @function exchangeRate
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryExchangeRateRequest} request QueryExchangeRateRequest message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#borrowLimit}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef BorrowLimitCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse} [response] QueryBorrowLimitResponse
                     */

                    /**
                     * Calls BorrowLimit.
                     * @function borrowLimit
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowLimitRequest} request QueryBorrowLimitRequest message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.BorrowLimitCallback} callback Node-style callback called with the error, if any, and QueryBorrowLimitResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.borrowLimit = function borrowLimit(request, callback) {
                        return this.rpcCall(borrowLimit, $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest, $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse, request, callback);
                    }, "name", { value: "BorrowLimit" });

                    /**
                     * Calls BorrowLimit.
                     * @function borrowLimit
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowLimitRequest} request QueryBorrowLimitRequest message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link umeenetwork.umee.leverage.v1beta1.Query#liquidationTargets}.
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @typedef LiquidationTargetsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse} [response] QueryLiquidationTargetsResponse
                     */

                    /**
                     * Calls LiquidationTargets.
                     * @function liquidationTargets
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLiquidationTargetsRequest} request QueryLiquidationTargetsRequest message or plain object
                     * @param {umeenetwork.umee.leverage.v1beta1.Query.LiquidationTargetsCallback} callback Node-style callback called with the error, if any, and QueryLiquidationTargetsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.liquidationTargets = function liquidationTargets(request, callback) {
                        return this.rpcCall(liquidationTargets, $root.umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest, $root.umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse, request, callback);
                    }, "name", { value: "LiquidationTargets" });

                    /**
                     * Calls LiquidationTargets.
                     * @function liquidationTargets
                     * @memberof umeenetwork.umee.leverage.v1beta1.Query
                     * @instance
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLiquidationTargetsRequest} request QueryLiquidationTargetsRequest message or plain object
                     * @returns {Promise<umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse>} Promise
                     * @variation 2
                     */

                    return Query;
                })();

                v1beta1.QueryRegisteredTokens = (function() {

                    /**
                     * Properties of a QueryRegisteredTokens.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryRegisteredTokens
                     */

                    /**
                     * Constructs a new QueryRegisteredTokens.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryRegisteredTokens.
                     * @implements IQueryRegisteredTokens
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryRegisteredTokens=} [properties] Properties to set
                     */
                    function QueryRegisteredTokens(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new QueryRegisteredTokens instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryRegisteredTokens=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens} QueryRegisteredTokens instance
                     */
                    QueryRegisteredTokens.create = function create(properties) {
                        return new QueryRegisteredTokens(properties);
                    };

                    /**
                     * Encodes the specified QueryRegisteredTokens message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryRegisteredTokens} message QueryRegisteredTokens message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryRegisteredTokens.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryRegisteredTokens message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryRegisteredTokens} message QueryRegisteredTokens message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryRegisteredTokens.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryRegisteredTokens message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens} QueryRegisteredTokens
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryRegisteredTokens.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryRegisteredTokens message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens} QueryRegisteredTokens
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryRegisteredTokens.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryRegisteredTokens message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryRegisteredTokens.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a QueryRegisteredTokens message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens} QueryRegisteredTokens
                     */
                    QueryRegisteredTokens.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens)
                            return object;
                        return new $root.umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens();
                    };

                    /**
                     * Creates a plain object from a QueryRegisteredTokens message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens} message QueryRegisteredTokens
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryRegisteredTokens.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this QueryRegisteredTokens to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokens
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryRegisteredTokens.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryRegisteredTokens;
                })();

                v1beta1.QueryAvailableBorrowRequest = (function() {

                    /**
                     * Properties of a QueryAvailableBorrowRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryAvailableBorrowRequest
                     * @property {string|null} [denom] QueryAvailableBorrowRequest denom
                     */

                    /**
                     * Constructs a new QueryAvailableBorrowRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryAvailableBorrowRequest.
                     * @implements IQueryAvailableBorrowRequest
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryAvailableBorrowRequest=} [properties] Properties to set
                     */
                    function QueryAvailableBorrowRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryAvailableBorrowRequest denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest
                     * @instance
                     */
                    QueryAvailableBorrowRequest.prototype.denom = "";

                    /**
                     * Creates a new QueryAvailableBorrowRequest instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryAvailableBorrowRequest=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest} QueryAvailableBorrowRequest instance
                     */
                    QueryAvailableBorrowRequest.create = function create(properties) {
                        return new QueryAvailableBorrowRequest(properties);
                    };

                    /**
                     * Encodes the specified QueryAvailableBorrowRequest message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryAvailableBorrowRequest} message QueryAvailableBorrowRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryAvailableBorrowRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryAvailableBorrowRequest message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryAvailableBorrowRequest} message QueryAvailableBorrowRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryAvailableBorrowRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryAvailableBorrowRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest} QueryAvailableBorrowRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryAvailableBorrowRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryAvailableBorrowRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest} QueryAvailableBorrowRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryAvailableBorrowRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryAvailableBorrowRequest message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryAvailableBorrowRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryAvailableBorrowRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest} QueryAvailableBorrowRequest
                     */
                    QueryAvailableBorrowRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryAvailableBorrowRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest} message QueryAvailableBorrowRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryAvailableBorrowRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.denom = "";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        return object;
                    };

                    /**
                     * Converts this QueryAvailableBorrowRequest to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryAvailableBorrowRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryAvailableBorrowRequest;
                })();

                v1beta1.QueryAvailableBorrowResponse = (function() {

                    /**
                     * Properties of a QueryAvailableBorrowResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryAvailableBorrowResponse
                     * @property {string|null} [amount] QueryAvailableBorrowResponse amount
                     */

                    /**
                     * Constructs a new QueryAvailableBorrowResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryAvailableBorrowResponse.
                     * @implements IQueryAvailableBorrowResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryAvailableBorrowResponse=} [properties] Properties to set
                     */
                    function QueryAvailableBorrowResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryAvailableBorrowResponse amount.
                     * @member {string} amount
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse
                     * @instance
                     */
                    QueryAvailableBorrowResponse.prototype.amount = "";

                    /**
                     * Creates a new QueryAvailableBorrowResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryAvailableBorrowResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse} QueryAvailableBorrowResponse instance
                     */
                    QueryAvailableBorrowResponse.create = function create(properties) {
                        return new QueryAvailableBorrowResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryAvailableBorrowResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryAvailableBorrowResponse} message QueryAvailableBorrowResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryAvailableBorrowResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.amount);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryAvailableBorrowResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryAvailableBorrowResponse} message QueryAvailableBorrowResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryAvailableBorrowResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryAvailableBorrowResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse} QueryAvailableBorrowResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryAvailableBorrowResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.amount = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryAvailableBorrowResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse} QueryAvailableBorrowResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryAvailableBorrowResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryAvailableBorrowResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryAvailableBorrowResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (!$util.isString(message.amount))
                                return "amount: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryAvailableBorrowResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse} QueryAvailableBorrowResponse
                     */
                    QueryAvailableBorrowResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse();
                        if (object.amount != null)
                            message.amount = String(object.amount);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryAvailableBorrowResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse} message QueryAvailableBorrowResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryAvailableBorrowResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.amount = "";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = message.amount;
                        return object;
                    };

                    /**
                     * Converts this QueryAvailableBorrowResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryAvailableBorrowResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryAvailableBorrowResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryAvailableBorrowResponse;
                })();

                v1beta1.QueryBorrowAPYRequest = (function() {

                    /**
                     * Properties of a QueryBorrowAPYRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryBorrowAPYRequest
                     * @property {string|null} [denom] QueryBorrowAPYRequest denom
                     */

                    /**
                     * Constructs a new QueryBorrowAPYRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryBorrowAPYRequest.
                     * @implements IQueryBorrowAPYRequest
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowAPYRequest=} [properties] Properties to set
                     */
                    function QueryBorrowAPYRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryBorrowAPYRequest denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest
                     * @instance
                     */
                    QueryBorrowAPYRequest.prototype.denom = "";

                    /**
                     * Creates a new QueryBorrowAPYRequest instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowAPYRequest=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest} QueryBorrowAPYRequest instance
                     */
                    QueryBorrowAPYRequest.create = function create(properties) {
                        return new QueryBorrowAPYRequest(properties);
                    };

                    /**
                     * Encodes the specified QueryBorrowAPYRequest message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowAPYRequest} message QueryBorrowAPYRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBorrowAPYRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryBorrowAPYRequest message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowAPYRequest} message QueryBorrowAPYRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBorrowAPYRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryBorrowAPYRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest} QueryBorrowAPYRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBorrowAPYRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryBorrowAPYRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest} QueryBorrowAPYRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBorrowAPYRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryBorrowAPYRequest message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryBorrowAPYRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryBorrowAPYRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest} QueryBorrowAPYRequest
                     */
                    QueryBorrowAPYRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryBorrowAPYRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest} message QueryBorrowAPYRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryBorrowAPYRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.denom = "";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        return object;
                    };

                    /**
                     * Converts this QueryBorrowAPYRequest to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryBorrowAPYRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryBorrowAPYRequest;
                })();

                v1beta1.QueryBorrowAPYResponse = (function() {

                    /**
                     * Properties of a QueryBorrowAPYResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryBorrowAPYResponse
                     * @property {string|null} [APY] QueryBorrowAPYResponse APY
                     */

                    /**
                     * Constructs a new QueryBorrowAPYResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryBorrowAPYResponse.
                     * @implements IQueryBorrowAPYResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowAPYResponse=} [properties] Properties to set
                     */
                    function QueryBorrowAPYResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryBorrowAPYResponse APY.
                     * @member {string} APY
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse
                     * @instance
                     */
                    QueryBorrowAPYResponse.prototype.APY = "";

                    /**
                     * Creates a new QueryBorrowAPYResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowAPYResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse} QueryBorrowAPYResponse instance
                     */
                    QueryBorrowAPYResponse.create = function create(properties) {
                        return new QueryBorrowAPYResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryBorrowAPYResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowAPYResponse} message QueryBorrowAPYResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBorrowAPYResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.APY != null && Object.hasOwnProperty.call(message, "APY"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.APY);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryBorrowAPYResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowAPYResponse} message QueryBorrowAPYResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBorrowAPYResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryBorrowAPYResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse} QueryBorrowAPYResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBorrowAPYResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.APY = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryBorrowAPYResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse} QueryBorrowAPYResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBorrowAPYResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryBorrowAPYResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryBorrowAPYResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.APY != null && message.hasOwnProperty("APY"))
                            if (!$util.isString(message.APY))
                                return "APY: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryBorrowAPYResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse} QueryBorrowAPYResponse
                     */
                    QueryBorrowAPYResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse();
                        if (object.APY != null)
                            message.APY = String(object.APY);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryBorrowAPYResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse} message QueryBorrowAPYResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryBorrowAPYResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.APY = "";
                        if (message.APY != null && message.hasOwnProperty("APY"))
                            object.APY = message.APY;
                        return object;
                    };

                    /**
                     * Converts this QueryBorrowAPYResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowAPYResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryBorrowAPYResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryBorrowAPYResponse;
                })();

                v1beta1.QueryLendAPYRequest = (function() {

                    /**
                     * Properties of a QueryLendAPYRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryLendAPYRequest
                     * @property {string|null} [denom] QueryLendAPYRequest denom
                     */

                    /**
                     * Constructs a new QueryLendAPYRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryLendAPYRequest.
                     * @implements IQueryLendAPYRequest
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLendAPYRequest=} [properties] Properties to set
                     */
                    function QueryLendAPYRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryLendAPYRequest denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest
                     * @instance
                     */
                    QueryLendAPYRequest.prototype.denom = "";

                    /**
                     * Creates a new QueryLendAPYRequest instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLendAPYRequest=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest} QueryLendAPYRequest instance
                     */
                    QueryLendAPYRequest.create = function create(properties) {
                        return new QueryLendAPYRequest(properties);
                    };

                    /**
                     * Encodes the specified QueryLendAPYRequest message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLendAPYRequest} message QueryLendAPYRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryLendAPYRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryLendAPYRequest message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLendAPYRequest} message QueryLendAPYRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryLendAPYRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryLendAPYRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest} QueryLendAPYRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryLendAPYRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryLendAPYRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest} QueryLendAPYRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryLendAPYRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryLendAPYRequest message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryLendAPYRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryLendAPYRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest} QueryLendAPYRequest
                     */
                    QueryLendAPYRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryLendAPYRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest} message QueryLendAPYRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryLendAPYRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.denom = "";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        return object;
                    };

                    /**
                     * Converts this QueryLendAPYRequest to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryLendAPYRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryLendAPYRequest;
                })();

                v1beta1.QueryLendAPYResponse = (function() {

                    /**
                     * Properties of a QueryLendAPYResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryLendAPYResponse
                     * @property {string|null} [APY] QueryLendAPYResponse APY
                     */

                    /**
                     * Constructs a new QueryLendAPYResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryLendAPYResponse.
                     * @implements IQueryLendAPYResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLendAPYResponse=} [properties] Properties to set
                     */
                    function QueryLendAPYResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryLendAPYResponse APY.
                     * @member {string} APY
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse
                     * @instance
                     */
                    QueryLendAPYResponse.prototype.APY = "";

                    /**
                     * Creates a new QueryLendAPYResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLendAPYResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse} QueryLendAPYResponse instance
                     */
                    QueryLendAPYResponse.create = function create(properties) {
                        return new QueryLendAPYResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryLendAPYResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLendAPYResponse} message QueryLendAPYResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryLendAPYResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.APY != null && Object.hasOwnProperty.call(message, "APY"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.APY);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryLendAPYResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLendAPYResponse} message QueryLendAPYResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryLendAPYResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryLendAPYResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse} QueryLendAPYResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryLendAPYResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.APY = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryLendAPYResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse} QueryLendAPYResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryLendAPYResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryLendAPYResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryLendAPYResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.APY != null && message.hasOwnProperty("APY"))
                            if (!$util.isString(message.APY))
                                return "APY: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryLendAPYResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse} QueryLendAPYResponse
                     */
                    QueryLendAPYResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse();
                        if (object.APY != null)
                            message.APY = String(object.APY);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryLendAPYResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse} message QueryLendAPYResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryLendAPYResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.APY = "";
                        if (message.APY != null && message.hasOwnProperty("APY"))
                            object.APY = message.APY;
                        return object;
                    };

                    /**
                     * Converts this QueryLendAPYResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLendAPYResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryLendAPYResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryLendAPYResponse;
                })();

                v1beta1.QueryMarketSizeRequest = (function() {

                    /**
                     * Properties of a QueryMarketSizeRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryMarketSizeRequest
                     * @property {string|null} [denom] QueryMarketSizeRequest denom
                     */

                    /**
                     * Constructs a new QueryMarketSizeRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryMarketSizeRequest.
                     * @implements IQueryMarketSizeRequest
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryMarketSizeRequest=} [properties] Properties to set
                     */
                    function QueryMarketSizeRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryMarketSizeRequest denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest
                     * @instance
                     */
                    QueryMarketSizeRequest.prototype.denom = "";

                    /**
                     * Creates a new QueryMarketSizeRequest instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryMarketSizeRequest=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest} QueryMarketSizeRequest instance
                     */
                    QueryMarketSizeRequest.create = function create(properties) {
                        return new QueryMarketSizeRequest(properties);
                    };

                    /**
                     * Encodes the specified QueryMarketSizeRequest message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryMarketSizeRequest} message QueryMarketSizeRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryMarketSizeRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryMarketSizeRequest message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryMarketSizeRequest} message QueryMarketSizeRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryMarketSizeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryMarketSizeRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest} QueryMarketSizeRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryMarketSizeRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryMarketSizeRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest} QueryMarketSizeRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryMarketSizeRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryMarketSizeRequest message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryMarketSizeRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryMarketSizeRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest} QueryMarketSizeRequest
                     */
                    QueryMarketSizeRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryMarketSizeRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest} message QueryMarketSizeRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryMarketSizeRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.denom = "";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        return object;
                    };

                    /**
                     * Converts this QueryMarketSizeRequest to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryMarketSizeRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryMarketSizeRequest;
                })();

                v1beta1.QueryMarketSizeResponse = (function() {

                    /**
                     * Properties of a QueryMarketSizeResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryMarketSizeResponse
                     * @property {string|null} [marketSizeUsd] QueryMarketSizeResponse marketSizeUsd
                     */

                    /**
                     * Constructs a new QueryMarketSizeResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryMarketSizeResponse.
                     * @implements IQueryMarketSizeResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryMarketSizeResponse=} [properties] Properties to set
                     */
                    function QueryMarketSizeResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryMarketSizeResponse marketSizeUsd.
                     * @member {string} marketSizeUsd
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse
                     * @instance
                     */
                    QueryMarketSizeResponse.prototype.marketSizeUsd = "";

                    /**
                     * Creates a new QueryMarketSizeResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryMarketSizeResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse} QueryMarketSizeResponse instance
                     */
                    QueryMarketSizeResponse.create = function create(properties) {
                        return new QueryMarketSizeResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryMarketSizeResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryMarketSizeResponse} message QueryMarketSizeResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryMarketSizeResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.marketSizeUsd != null && Object.hasOwnProperty.call(message, "marketSizeUsd"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.marketSizeUsd);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryMarketSizeResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryMarketSizeResponse} message QueryMarketSizeResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryMarketSizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryMarketSizeResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse} QueryMarketSizeResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryMarketSizeResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.marketSizeUsd = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryMarketSizeResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse} QueryMarketSizeResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryMarketSizeResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryMarketSizeResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryMarketSizeResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.marketSizeUsd != null && message.hasOwnProperty("marketSizeUsd"))
                            if (!$util.isString(message.marketSizeUsd))
                                return "marketSizeUsd: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryMarketSizeResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse} QueryMarketSizeResponse
                     */
                    QueryMarketSizeResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse();
                        if (object.marketSizeUsd != null)
                            message.marketSizeUsd = String(object.marketSizeUsd);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryMarketSizeResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse} message QueryMarketSizeResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryMarketSizeResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.marketSizeUsd = "";
                        if (message.marketSizeUsd != null && message.hasOwnProperty("marketSizeUsd"))
                            object.marketSizeUsd = message.marketSizeUsd;
                        return object;
                    };

                    /**
                     * Converts this QueryMarketSizeResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryMarketSizeResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryMarketSizeResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryMarketSizeResponse;
                })();

                v1beta1.QueryRegisteredTokensResponse = (function() {

                    /**
                     * Properties of a QueryRegisteredTokensResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryRegisteredTokensResponse
                     * @property {Array.<umeenetwork.umee.leverage.v1beta1.IToken>|null} [registry] QueryRegisteredTokensResponse registry
                     */

                    /**
                     * Constructs a new QueryRegisteredTokensResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryRegisteredTokensResponse.
                     * @implements IQueryRegisteredTokensResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryRegisteredTokensResponse=} [properties] Properties to set
                     */
                    function QueryRegisteredTokensResponse(properties) {
                        this.registry = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryRegisteredTokensResponse registry.
                     * @member {Array.<umeenetwork.umee.leverage.v1beta1.IToken>} registry
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse
                     * @instance
                     */
                    QueryRegisteredTokensResponse.prototype.registry = $util.emptyArray;

                    /**
                     * Creates a new QueryRegisteredTokensResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryRegisteredTokensResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse} QueryRegisteredTokensResponse instance
                     */
                    QueryRegisteredTokensResponse.create = function create(properties) {
                        return new QueryRegisteredTokensResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryRegisteredTokensResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryRegisteredTokensResponse} message QueryRegisteredTokensResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryRegisteredTokensResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.registry != null && message.registry.length)
                            for (let i = 0; i < message.registry.length; ++i)
                                $root.umeenetwork.umee.leverage.v1beta1.Token.encode(message.registry[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryRegisteredTokensResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryRegisteredTokensResponse} message QueryRegisteredTokensResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryRegisteredTokensResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryRegisteredTokensResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse} QueryRegisteredTokensResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryRegisteredTokensResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.registry && message.registry.length))
                                    message.registry = [];
                                message.registry.push($root.umeenetwork.umee.leverage.v1beta1.Token.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryRegisteredTokensResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse} QueryRegisteredTokensResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryRegisteredTokensResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryRegisteredTokensResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryRegisteredTokensResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.registry != null && message.hasOwnProperty("registry")) {
                            if (!Array.isArray(message.registry))
                                return "registry: array expected";
                            for (let i = 0; i < message.registry.length; ++i) {
                                let error = $root.umeenetwork.umee.leverage.v1beta1.Token.verify(message.registry[i]);
                                if (error)
                                    return "registry." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryRegisteredTokensResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse} QueryRegisteredTokensResponse
                     */
                    QueryRegisteredTokensResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse();
                        if (object.registry) {
                            if (!Array.isArray(object.registry))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse.registry: array expected");
                            message.registry = [];
                            for (let i = 0; i < object.registry.length; ++i) {
                                if (typeof object.registry[i] !== "object")
                                    throw TypeError(".umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse.registry: object expected");
                                message.registry[i] = $root.umeenetwork.umee.leverage.v1beta1.Token.fromObject(object.registry[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryRegisteredTokensResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse} message QueryRegisteredTokensResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryRegisteredTokensResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.registry = [];
                        if (message.registry && message.registry.length) {
                            object.registry = [];
                            for (let j = 0; j < message.registry.length; ++j)
                                object.registry[j] = $root.umeenetwork.umee.leverage.v1beta1.Token.toObject(message.registry[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this QueryRegisteredTokensResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryRegisteredTokensResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryRegisteredTokensResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryRegisteredTokensResponse;
                })();

                v1beta1.QueryParamsRequest = (function() {

                    /**
                     * Properties of a QueryParamsRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryParamsRequest
                     */

                    /**
                     * Constructs a new QueryParamsRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryParamsRequest.
                     * @implements IQueryParamsRequest
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryParamsRequest=} [properties] Properties to set
                     */
                    function QueryParamsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new QueryParamsRequest instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryParamsRequest=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryParamsRequest} QueryParamsRequest instance
                     */
                    QueryParamsRequest.create = function create(properties) {
                        return new QueryParamsRequest(properties);
                    };

                    /**
                     * Encodes the specified QueryParamsRequest message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryParamsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryParamsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryParamsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryParamsRequest} QueryParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryParamsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryParamsRequest} QueryParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryParamsRequest message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryParamsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryParamsRequest} QueryParamsRequest
                     */
                    QueryParamsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryParamsRequest)
                            return object;
                        return new $root.umeenetwork.umee.leverage.v1beta1.QueryParamsRequest();
                    };

                    /**
                     * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryParamsRequest} message QueryParamsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryParamsRequest.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this QueryParamsRequest to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryParamsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryParamsRequest;
                })();

                v1beta1.QueryParamsResponse = (function() {

                    /**
                     * Properties of a QueryParamsResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryParamsResponse
                     * @property {umeenetwork.umee.leverage.v1beta1.IParams|null} [params] QueryParamsResponse params
                     */

                    /**
                     * Constructs a new QueryParamsResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryParamsResponse.
                     * @implements IQueryParamsResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryParamsResponse=} [properties] Properties to set
                     */
                    function QueryParamsResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryParamsResponse params.
                     * @member {umeenetwork.umee.leverage.v1beta1.IParams|null|undefined} params
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsResponse
                     * @instance
                     */
                    QueryParamsResponse.prototype.params = null;

                    /**
                     * Creates a new QueryParamsResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryParamsResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryParamsResponse} QueryParamsResponse instance
                     */
                    QueryParamsResponse.create = function create(properties) {
                        return new QueryParamsResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryParamsResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryParamsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.umeenetwork.umee.leverage.v1beta1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryParamsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryParamsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryParamsResponse} QueryParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryParamsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.params = $root.umeenetwork.umee.leverage.v1beta1.Params.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryParamsResponse} QueryParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryParamsResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryParamsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            let error = $root.umeenetwork.umee.leverage.v1beta1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryParamsResponse} QueryParamsResponse
                     */
                    QueryParamsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryParamsResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryParamsResponse();
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.QueryParamsResponse.params: object expected");
                            message.params = $root.umeenetwork.umee.leverage.v1beta1.Params.fromObject(object.params);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryParamsResponse} message QueryParamsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryParamsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.params = null;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.umeenetwork.umee.leverage.v1beta1.Params.toObject(message.params, options);
                        return object;
                    };

                    /**
                     * Converts this QueryParamsResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryParamsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryParamsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryParamsResponse;
                })();

                v1beta1.QueryBorrowedRequest = (function() {

                    /**
                     * Properties of a QueryBorrowedRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryBorrowedRequest
                     * @property {string|null} [address] QueryBorrowedRequest address
                     * @property {string|null} [denom] QueryBorrowedRequest denom
                     */

                    /**
                     * Constructs a new QueryBorrowedRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryBorrowedRequest.
                     * @implements IQueryBorrowedRequest
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowedRequest=} [properties] Properties to set
                     */
                    function QueryBorrowedRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryBorrowedRequest address.
                     * @member {string} address
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest
                     * @instance
                     */
                    QueryBorrowedRequest.prototype.address = "";

                    /**
                     * QueryBorrowedRequest denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest
                     * @instance
                     */
                    QueryBorrowedRequest.prototype.denom = "";

                    /**
                     * Creates a new QueryBorrowedRequest instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowedRequest=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest} QueryBorrowedRequest instance
                     */
                    QueryBorrowedRequest.create = function create(properties) {
                        return new QueryBorrowedRequest(properties);
                    };

                    /**
                     * Encodes the specified QueryBorrowedRequest message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowedRequest} message QueryBorrowedRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBorrowedRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryBorrowedRequest message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowedRequest} message QueryBorrowedRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBorrowedRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryBorrowedRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest} QueryBorrowedRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBorrowedRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = reader.string();
                                break;
                            case 2:
                                message.denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryBorrowedRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest} QueryBorrowedRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBorrowedRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryBorrowedRequest message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryBorrowedRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryBorrowedRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest} QueryBorrowedRequest
                     */
                    QueryBorrowedRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest();
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryBorrowedRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest} message QueryBorrowedRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryBorrowedRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.address = "";
                            object.denom = "";
                        }
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        return object;
                    };

                    /**
                     * Converts this QueryBorrowedRequest to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryBorrowedRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryBorrowedRequest;
                })();

                v1beta1.QueryBorrowedResponse = (function() {

                    /**
                     * Properties of a QueryBorrowedResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryBorrowedResponse
                     * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [borrowed] QueryBorrowedResponse borrowed
                     */

                    /**
                     * Constructs a new QueryBorrowedResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryBorrowedResponse.
                     * @implements IQueryBorrowedResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowedResponse=} [properties] Properties to set
                     */
                    function QueryBorrowedResponse(properties) {
                        this.borrowed = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryBorrowedResponse borrowed.
                     * @member {Array.<cosmos.base.v1beta1.ICoin>} borrowed
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse
                     * @instance
                     */
                    QueryBorrowedResponse.prototype.borrowed = $util.emptyArray;

                    /**
                     * Creates a new QueryBorrowedResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowedResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse} QueryBorrowedResponse instance
                     */
                    QueryBorrowedResponse.create = function create(properties) {
                        return new QueryBorrowedResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryBorrowedResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowedResponse} message QueryBorrowedResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBorrowedResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.borrowed != null && message.borrowed.length)
                            for (let i = 0; i < message.borrowed.length; ++i)
                                $root.cosmos.base.v1beta1.Coin.encode(message.borrowed[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryBorrowedResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowedResponse} message QueryBorrowedResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBorrowedResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryBorrowedResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse} QueryBorrowedResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBorrowedResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.borrowed && message.borrowed.length))
                                    message.borrowed = [];
                                message.borrowed.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryBorrowedResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse} QueryBorrowedResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBorrowedResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryBorrowedResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryBorrowedResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.borrowed != null && message.hasOwnProperty("borrowed")) {
                            if (!Array.isArray(message.borrowed))
                                return "borrowed: array expected";
                            for (let i = 0; i < message.borrowed.length; ++i) {
                                let error = $root.cosmos.base.v1beta1.Coin.verify(message.borrowed[i]);
                                if (error)
                                    return "borrowed." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryBorrowedResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse} QueryBorrowedResponse
                     */
                    QueryBorrowedResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse();
                        if (object.borrowed) {
                            if (!Array.isArray(object.borrowed))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse.borrowed: array expected");
                            message.borrowed = [];
                            for (let i = 0; i < object.borrowed.length; ++i) {
                                if (typeof object.borrowed[i] !== "object")
                                    throw TypeError(".umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse.borrowed: object expected");
                                message.borrowed[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.borrowed[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryBorrowedResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse} message QueryBorrowedResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryBorrowedResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.borrowed = [];
                        if (message.borrowed && message.borrowed.length) {
                            object.borrowed = [];
                            for (let j = 0; j < message.borrowed.length; ++j)
                                object.borrowed[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.borrowed[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this QueryBorrowedResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowedResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryBorrowedResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryBorrowedResponse;
                })();

                v1beta1.QueryReserveAmountRequest = (function() {

                    /**
                     * Properties of a QueryReserveAmountRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryReserveAmountRequest
                     * @property {string|null} [denom] QueryReserveAmountRequest denom
                     */

                    /**
                     * Constructs a new QueryReserveAmountRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryReserveAmountRequest.
                     * @implements IQueryReserveAmountRequest
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryReserveAmountRequest=} [properties] Properties to set
                     */
                    function QueryReserveAmountRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryReserveAmountRequest denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest
                     * @instance
                     */
                    QueryReserveAmountRequest.prototype.denom = "";

                    /**
                     * Creates a new QueryReserveAmountRequest instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryReserveAmountRequest=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest} QueryReserveAmountRequest instance
                     */
                    QueryReserveAmountRequest.create = function create(properties) {
                        return new QueryReserveAmountRequest(properties);
                    };

                    /**
                     * Encodes the specified QueryReserveAmountRequest message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryReserveAmountRequest} message QueryReserveAmountRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryReserveAmountRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryReserveAmountRequest message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryReserveAmountRequest} message QueryReserveAmountRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryReserveAmountRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryReserveAmountRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest} QueryReserveAmountRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryReserveAmountRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryReserveAmountRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest} QueryReserveAmountRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryReserveAmountRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryReserveAmountRequest message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryReserveAmountRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryReserveAmountRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest} QueryReserveAmountRequest
                     */
                    QueryReserveAmountRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryReserveAmountRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest} message QueryReserveAmountRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryReserveAmountRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.denom = "";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        return object;
                    };

                    /**
                     * Converts this QueryReserveAmountRequest to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryReserveAmountRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryReserveAmountRequest;
                })();

                v1beta1.QueryReserveAmountResponse = (function() {

                    /**
                     * Properties of a QueryReserveAmountResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryReserveAmountResponse
                     * @property {string|null} [amount] QueryReserveAmountResponse amount
                     */

                    /**
                     * Constructs a new QueryReserveAmountResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryReserveAmountResponse.
                     * @implements IQueryReserveAmountResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryReserveAmountResponse=} [properties] Properties to set
                     */
                    function QueryReserveAmountResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryReserveAmountResponse amount.
                     * @member {string} amount
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse
                     * @instance
                     */
                    QueryReserveAmountResponse.prototype.amount = "";

                    /**
                     * Creates a new QueryReserveAmountResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryReserveAmountResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse} QueryReserveAmountResponse instance
                     */
                    QueryReserveAmountResponse.create = function create(properties) {
                        return new QueryReserveAmountResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryReserveAmountResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryReserveAmountResponse} message QueryReserveAmountResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryReserveAmountResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.amount);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryReserveAmountResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryReserveAmountResponse} message QueryReserveAmountResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryReserveAmountResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryReserveAmountResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse} QueryReserveAmountResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryReserveAmountResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.amount = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryReserveAmountResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse} QueryReserveAmountResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryReserveAmountResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryReserveAmountResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryReserveAmountResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (!$util.isString(message.amount))
                                return "amount: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryReserveAmountResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse} QueryReserveAmountResponse
                     */
                    QueryReserveAmountResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse();
                        if (object.amount != null)
                            message.amount = String(object.amount);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryReserveAmountResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse} message QueryReserveAmountResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryReserveAmountResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.amount = "";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = message.amount;
                        return object;
                    };

                    /**
                     * Converts this QueryReserveAmountResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryReserveAmountResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryReserveAmountResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryReserveAmountResponse;
                })();

                v1beta1.QueryCollateralSettingRequest = (function() {

                    /**
                     * Properties of a QueryCollateralSettingRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryCollateralSettingRequest
                     * @property {string|null} [address] QueryCollateralSettingRequest address
                     * @property {string|null} [denom] QueryCollateralSettingRequest denom
                     */

                    /**
                     * Constructs a new QueryCollateralSettingRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryCollateralSettingRequest.
                     * @implements IQueryCollateralSettingRequest
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralSettingRequest=} [properties] Properties to set
                     */
                    function QueryCollateralSettingRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryCollateralSettingRequest address.
                     * @member {string} address
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest
                     * @instance
                     */
                    QueryCollateralSettingRequest.prototype.address = "";

                    /**
                     * QueryCollateralSettingRequest denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest
                     * @instance
                     */
                    QueryCollateralSettingRequest.prototype.denom = "";

                    /**
                     * Creates a new QueryCollateralSettingRequest instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralSettingRequest=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest} QueryCollateralSettingRequest instance
                     */
                    QueryCollateralSettingRequest.create = function create(properties) {
                        return new QueryCollateralSettingRequest(properties);
                    };

                    /**
                     * Encodes the specified QueryCollateralSettingRequest message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralSettingRequest} message QueryCollateralSettingRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryCollateralSettingRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryCollateralSettingRequest message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralSettingRequest} message QueryCollateralSettingRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryCollateralSettingRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryCollateralSettingRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest} QueryCollateralSettingRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryCollateralSettingRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = reader.string();
                                break;
                            case 2:
                                message.denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryCollateralSettingRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest} QueryCollateralSettingRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryCollateralSettingRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryCollateralSettingRequest message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryCollateralSettingRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryCollateralSettingRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest} QueryCollateralSettingRequest
                     */
                    QueryCollateralSettingRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest();
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryCollateralSettingRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest} message QueryCollateralSettingRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryCollateralSettingRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.address = "";
                            object.denom = "";
                        }
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        return object;
                    };

                    /**
                     * Converts this QueryCollateralSettingRequest to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryCollateralSettingRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryCollateralSettingRequest;
                })();

                v1beta1.QueryCollateralSettingResponse = (function() {

                    /**
                     * Properties of a QueryCollateralSettingResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryCollateralSettingResponse
                     * @property {boolean|null} [enabled] QueryCollateralSettingResponse enabled
                     */

                    /**
                     * Constructs a new QueryCollateralSettingResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryCollateralSettingResponse.
                     * @implements IQueryCollateralSettingResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralSettingResponse=} [properties] Properties to set
                     */
                    function QueryCollateralSettingResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryCollateralSettingResponse enabled.
                     * @member {boolean} enabled
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse
                     * @instance
                     */
                    QueryCollateralSettingResponse.prototype.enabled = false;

                    /**
                     * Creates a new QueryCollateralSettingResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralSettingResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse} QueryCollateralSettingResponse instance
                     */
                    QueryCollateralSettingResponse.create = function create(properties) {
                        return new QueryCollateralSettingResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryCollateralSettingResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralSettingResponse} message QueryCollateralSettingResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryCollateralSettingResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.enabled != null && Object.hasOwnProperty.call(message, "enabled"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.enabled);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryCollateralSettingResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralSettingResponse} message QueryCollateralSettingResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryCollateralSettingResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryCollateralSettingResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse} QueryCollateralSettingResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryCollateralSettingResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.enabled = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryCollateralSettingResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse} QueryCollateralSettingResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryCollateralSettingResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryCollateralSettingResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryCollateralSettingResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.enabled != null && message.hasOwnProperty("enabled"))
                            if (typeof message.enabled !== "boolean")
                                return "enabled: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a QueryCollateralSettingResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse} QueryCollateralSettingResponse
                     */
                    QueryCollateralSettingResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse();
                        if (object.enabled != null)
                            message.enabled = Boolean(object.enabled);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryCollateralSettingResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse} message QueryCollateralSettingResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryCollateralSettingResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.enabled = false;
                        if (message.enabled != null && message.hasOwnProperty("enabled"))
                            object.enabled = message.enabled;
                        return object;
                    };

                    /**
                     * Converts this QueryCollateralSettingResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralSettingResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryCollateralSettingResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryCollateralSettingResponse;
                })();

                v1beta1.QueryCollateralRequest = (function() {

                    /**
                     * Properties of a QueryCollateralRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryCollateralRequest
                     * @property {string|null} [address] QueryCollateralRequest address
                     * @property {string|null} [denom] QueryCollateralRequest denom
                     */

                    /**
                     * Constructs a new QueryCollateralRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryCollateralRequest.
                     * @implements IQueryCollateralRequest
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralRequest=} [properties] Properties to set
                     */
                    function QueryCollateralRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryCollateralRequest address.
                     * @member {string} address
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest
                     * @instance
                     */
                    QueryCollateralRequest.prototype.address = "";

                    /**
                     * QueryCollateralRequest denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest
                     * @instance
                     */
                    QueryCollateralRequest.prototype.denom = "";

                    /**
                     * Creates a new QueryCollateralRequest instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralRequest=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest} QueryCollateralRequest instance
                     */
                    QueryCollateralRequest.create = function create(properties) {
                        return new QueryCollateralRequest(properties);
                    };

                    /**
                     * Encodes the specified QueryCollateralRequest message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralRequest} message QueryCollateralRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryCollateralRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryCollateralRequest message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralRequest} message QueryCollateralRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryCollateralRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryCollateralRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest} QueryCollateralRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryCollateralRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = reader.string();
                                break;
                            case 2:
                                message.denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryCollateralRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest} QueryCollateralRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryCollateralRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryCollateralRequest message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryCollateralRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryCollateralRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest} QueryCollateralRequest
                     */
                    QueryCollateralRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest();
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryCollateralRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest} message QueryCollateralRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryCollateralRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.address = "";
                            object.denom = "";
                        }
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        return object;
                    };

                    /**
                     * Converts this QueryCollateralRequest to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryCollateralRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryCollateralRequest;
                })();

                v1beta1.QueryCollateralResponse = (function() {

                    /**
                     * Properties of a QueryCollateralResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryCollateralResponse
                     * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [collateral] QueryCollateralResponse collateral
                     */

                    /**
                     * Constructs a new QueryCollateralResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryCollateralResponse.
                     * @implements IQueryCollateralResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralResponse=} [properties] Properties to set
                     */
                    function QueryCollateralResponse(properties) {
                        this.collateral = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryCollateralResponse collateral.
                     * @member {Array.<cosmos.base.v1beta1.ICoin>} collateral
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse
                     * @instance
                     */
                    QueryCollateralResponse.prototype.collateral = $util.emptyArray;

                    /**
                     * Creates a new QueryCollateralResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse} QueryCollateralResponse instance
                     */
                    QueryCollateralResponse.create = function create(properties) {
                        return new QueryCollateralResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryCollateralResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralResponse} message QueryCollateralResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryCollateralResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.collateral != null && message.collateral.length)
                            for (let i = 0; i < message.collateral.length; ++i)
                                $root.cosmos.base.v1beta1.Coin.encode(message.collateral[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryCollateralResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryCollateralResponse} message QueryCollateralResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryCollateralResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryCollateralResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse} QueryCollateralResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryCollateralResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.collateral && message.collateral.length))
                                    message.collateral = [];
                                message.collateral.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryCollateralResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse} QueryCollateralResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryCollateralResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryCollateralResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryCollateralResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.collateral != null && message.hasOwnProperty("collateral")) {
                            if (!Array.isArray(message.collateral))
                                return "collateral: array expected";
                            for (let i = 0; i < message.collateral.length; ++i) {
                                let error = $root.cosmos.base.v1beta1.Coin.verify(message.collateral[i]);
                                if (error)
                                    return "collateral." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryCollateralResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse} QueryCollateralResponse
                     */
                    QueryCollateralResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse();
                        if (object.collateral) {
                            if (!Array.isArray(object.collateral))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse.collateral: array expected");
                            message.collateral = [];
                            for (let i = 0; i < object.collateral.length; ++i) {
                                if (typeof object.collateral[i] !== "object")
                                    throw TypeError(".umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse.collateral: object expected");
                                message.collateral[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.collateral[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryCollateralResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse} message QueryCollateralResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryCollateralResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.collateral = [];
                        if (message.collateral && message.collateral.length) {
                            object.collateral = [];
                            for (let j = 0; j < message.collateral.length; ++j)
                                object.collateral[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.collateral[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this QueryCollateralResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryCollateralResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryCollateralResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryCollateralResponse;
                })();

                v1beta1.QueryExchangeRateRequest = (function() {

                    /**
                     * Properties of a QueryExchangeRateRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryExchangeRateRequest
                     * @property {string|null} [denom] QueryExchangeRateRequest denom
                     */

                    /**
                     * Constructs a new QueryExchangeRateRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryExchangeRateRequest.
                     * @implements IQueryExchangeRateRequest
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryExchangeRateRequest=} [properties] Properties to set
                     */
                    function QueryExchangeRateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryExchangeRateRequest denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest
                     * @instance
                     */
                    QueryExchangeRateRequest.prototype.denom = "";

                    /**
                     * Creates a new QueryExchangeRateRequest instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryExchangeRateRequest=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest} QueryExchangeRateRequest instance
                     */
                    QueryExchangeRateRequest.create = function create(properties) {
                        return new QueryExchangeRateRequest(properties);
                    };

                    /**
                     * Encodes the specified QueryExchangeRateRequest message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryExchangeRateRequest} message QueryExchangeRateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryExchangeRateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryExchangeRateRequest message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryExchangeRateRequest} message QueryExchangeRateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryExchangeRateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryExchangeRateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest} QueryExchangeRateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryExchangeRateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryExchangeRateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest} QueryExchangeRateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryExchangeRateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryExchangeRateRequest message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryExchangeRateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryExchangeRateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest} QueryExchangeRateRequest
                     */
                    QueryExchangeRateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryExchangeRateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest} message QueryExchangeRateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryExchangeRateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.denom = "";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        return object;
                    };

                    /**
                     * Converts this QueryExchangeRateRequest to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryExchangeRateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryExchangeRateRequest;
                })();

                v1beta1.QueryExchangeRateResponse = (function() {

                    /**
                     * Properties of a QueryExchangeRateResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryExchangeRateResponse
                     * @property {string|null} [exchangeRate] QueryExchangeRateResponse exchangeRate
                     */

                    /**
                     * Constructs a new QueryExchangeRateResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryExchangeRateResponse.
                     * @implements IQueryExchangeRateResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryExchangeRateResponse=} [properties] Properties to set
                     */
                    function QueryExchangeRateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryExchangeRateResponse exchangeRate.
                     * @member {string} exchangeRate
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse
                     * @instance
                     */
                    QueryExchangeRateResponse.prototype.exchangeRate = "";

                    /**
                     * Creates a new QueryExchangeRateResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryExchangeRateResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse} QueryExchangeRateResponse instance
                     */
                    QueryExchangeRateResponse.create = function create(properties) {
                        return new QueryExchangeRateResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryExchangeRateResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryExchangeRateResponse} message QueryExchangeRateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryExchangeRateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.exchangeRate != null && Object.hasOwnProperty.call(message, "exchangeRate"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.exchangeRate);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryExchangeRateResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryExchangeRateResponse} message QueryExchangeRateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryExchangeRateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryExchangeRateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse} QueryExchangeRateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryExchangeRateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.exchangeRate = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryExchangeRateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse} QueryExchangeRateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryExchangeRateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryExchangeRateResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryExchangeRateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.exchangeRate != null && message.hasOwnProperty("exchangeRate"))
                            if (!$util.isString(message.exchangeRate))
                                return "exchangeRate: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryExchangeRateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse} QueryExchangeRateResponse
                     */
                    QueryExchangeRateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse();
                        if (object.exchangeRate != null)
                            message.exchangeRate = String(object.exchangeRate);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryExchangeRateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse} message QueryExchangeRateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryExchangeRateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.exchangeRate = "";
                        if (message.exchangeRate != null && message.hasOwnProperty("exchangeRate"))
                            object.exchangeRate = message.exchangeRate;
                        return object;
                    };

                    /**
                     * Converts this QueryExchangeRateResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryExchangeRateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryExchangeRateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryExchangeRateResponse;
                })();

                v1beta1.QueryBorrowLimitRequest = (function() {

                    /**
                     * Properties of a QueryBorrowLimitRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryBorrowLimitRequest
                     * @property {string|null} [address] QueryBorrowLimitRequest address
                     */

                    /**
                     * Constructs a new QueryBorrowLimitRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryBorrowLimitRequest.
                     * @implements IQueryBorrowLimitRequest
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowLimitRequest=} [properties] Properties to set
                     */
                    function QueryBorrowLimitRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryBorrowLimitRequest address.
                     * @member {string} address
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest
                     * @instance
                     */
                    QueryBorrowLimitRequest.prototype.address = "";

                    /**
                     * Creates a new QueryBorrowLimitRequest instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowLimitRequest=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest} QueryBorrowLimitRequest instance
                     */
                    QueryBorrowLimitRequest.create = function create(properties) {
                        return new QueryBorrowLimitRequest(properties);
                    };

                    /**
                     * Encodes the specified QueryBorrowLimitRequest message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowLimitRequest} message QueryBorrowLimitRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBorrowLimitRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryBorrowLimitRequest message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowLimitRequest} message QueryBorrowLimitRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBorrowLimitRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryBorrowLimitRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest} QueryBorrowLimitRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBorrowLimitRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryBorrowLimitRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest} QueryBorrowLimitRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBorrowLimitRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryBorrowLimitRequest message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryBorrowLimitRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryBorrowLimitRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest} QueryBorrowLimitRequest
                     */
                    QueryBorrowLimitRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest();
                        if (object.address != null)
                            message.address = String(object.address);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryBorrowLimitRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest} message QueryBorrowLimitRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryBorrowLimitRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.address = "";
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        return object;
                    };

                    /**
                     * Converts this QueryBorrowLimitRequest to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryBorrowLimitRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryBorrowLimitRequest;
                })();

                v1beta1.QueryBorrowLimitResponse = (function() {

                    /**
                     * Properties of a QueryBorrowLimitResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryBorrowLimitResponse
                     * @property {string|null} [borrowLimit] QueryBorrowLimitResponse borrowLimit
                     */

                    /**
                     * Constructs a new QueryBorrowLimitResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryBorrowLimitResponse.
                     * @implements IQueryBorrowLimitResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowLimitResponse=} [properties] Properties to set
                     */
                    function QueryBorrowLimitResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryBorrowLimitResponse borrowLimit.
                     * @member {string} borrowLimit
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse
                     * @instance
                     */
                    QueryBorrowLimitResponse.prototype.borrowLimit = "";

                    /**
                     * Creates a new QueryBorrowLimitResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowLimitResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse} QueryBorrowLimitResponse instance
                     */
                    QueryBorrowLimitResponse.create = function create(properties) {
                        return new QueryBorrowLimitResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryBorrowLimitResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowLimitResponse} message QueryBorrowLimitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBorrowLimitResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.borrowLimit != null && Object.hasOwnProperty.call(message, "borrowLimit"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.borrowLimit);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryBorrowLimitResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryBorrowLimitResponse} message QueryBorrowLimitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBorrowLimitResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryBorrowLimitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse} QueryBorrowLimitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBorrowLimitResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.borrowLimit = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryBorrowLimitResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse} QueryBorrowLimitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBorrowLimitResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryBorrowLimitResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryBorrowLimitResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.borrowLimit != null && message.hasOwnProperty("borrowLimit"))
                            if (!$util.isString(message.borrowLimit))
                                return "borrowLimit: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryBorrowLimitResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse} QueryBorrowLimitResponse
                     */
                    QueryBorrowLimitResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse();
                        if (object.borrowLimit != null)
                            message.borrowLimit = String(object.borrowLimit);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryBorrowLimitResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse} message QueryBorrowLimitResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryBorrowLimitResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.borrowLimit = "";
                        if (message.borrowLimit != null && message.hasOwnProperty("borrowLimit"))
                            object.borrowLimit = message.borrowLimit;
                        return object;
                    };

                    /**
                     * Converts this QueryBorrowLimitResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryBorrowLimitResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryBorrowLimitResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryBorrowLimitResponse;
                })();

                v1beta1.QueryLiquidationTargetsRequest = (function() {

                    /**
                     * Properties of a QueryLiquidationTargetsRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryLiquidationTargetsRequest
                     */

                    /**
                     * Constructs a new QueryLiquidationTargetsRequest.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryLiquidationTargetsRequest.
                     * @implements IQueryLiquidationTargetsRequest
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLiquidationTargetsRequest=} [properties] Properties to set
                     */
                    function QueryLiquidationTargetsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Creates a new QueryLiquidationTargetsRequest instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLiquidationTargetsRequest=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest} QueryLiquidationTargetsRequest instance
                     */
                    QueryLiquidationTargetsRequest.create = function create(properties) {
                        return new QueryLiquidationTargetsRequest(properties);
                    };

                    /**
                     * Encodes the specified QueryLiquidationTargetsRequest message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLiquidationTargetsRequest} message QueryLiquidationTargetsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryLiquidationTargetsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryLiquidationTargetsRequest message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLiquidationTargetsRequest} message QueryLiquidationTargetsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryLiquidationTargetsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryLiquidationTargetsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest} QueryLiquidationTargetsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryLiquidationTargetsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryLiquidationTargetsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest} QueryLiquidationTargetsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryLiquidationTargetsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryLiquidationTargetsRequest message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryLiquidationTargetsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a QueryLiquidationTargetsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest} QueryLiquidationTargetsRequest
                     */
                    QueryLiquidationTargetsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest)
                            return object;
                        return new $root.umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest();
                    };

                    /**
                     * Creates a plain object from a QueryLiquidationTargetsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest} message QueryLiquidationTargetsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryLiquidationTargetsRequest.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this QueryLiquidationTargetsRequest to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryLiquidationTargetsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryLiquidationTargetsRequest;
                })();

                v1beta1.QueryLiquidationTargetsResponse = (function() {

                    /**
                     * Properties of a QueryLiquidationTargetsResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IQueryLiquidationTargetsResponse
                     * @property {Array.<string>|null} [targets] QueryLiquidationTargetsResponse targets
                     */

                    /**
                     * Constructs a new QueryLiquidationTargetsResponse.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a QueryLiquidationTargetsResponse.
                     * @implements IQueryLiquidationTargetsResponse
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLiquidationTargetsResponse=} [properties] Properties to set
                     */
                    function QueryLiquidationTargetsResponse(properties) {
                        this.targets = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryLiquidationTargetsResponse targets.
                     * @member {Array.<string>} targets
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse
                     * @instance
                     */
                    QueryLiquidationTargetsResponse.prototype.targets = $util.emptyArray;

                    /**
                     * Creates a new QueryLiquidationTargetsResponse instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLiquidationTargetsResponse=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse} QueryLiquidationTargetsResponse instance
                     */
                    QueryLiquidationTargetsResponse.create = function create(properties) {
                        return new QueryLiquidationTargetsResponse(properties);
                    };

                    /**
                     * Encodes the specified QueryLiquidationTargetsResponse message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLiquidationTargetsResponse} message QueryLiquidationTargetsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryLiquidationTargetsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.targets != null && message.targets.length)
                            for (let i = 0; i < message.targets.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.targets[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryLiquidationTargetsResponse message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IQueryLiquidationTargetsResponse} message QueryLiquidationTargetsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryLiquidationTargetsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryLiquidationTargetsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse} QueryLiquidationTargetsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryLiquidationTargetsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.targets && message.targets.length))
                                    message.targets = [];
                                message.targets.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryLiquidationTargetsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse} QueryLiquidationTargetsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryLiquidationTargetsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryLiquidationTargetsResponse message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryLiquidationTargetsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.targets != null && message.hasOwnProperty("targets")) {
                            if (!Array.isArray(message.targets))
                                return "targets: array expected";
                            for (let i = 0; i < message.targets.length; ++i)
                                if (!$util.isString(message.targets[i]))
                                    return "targets: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryLiquidationTargetsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse} QueryLiquidationTargetsResponse
                     */
                    QueryLiquidationTargetsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse();
                        if (object.targets) {
                            if (!Array.isArray(object.targets))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse.targets: array expected");
                            message.targets = [];
                            for (let i = 0; i < object.targets.length; ++i)
                                message.targets[i] = String(object.targets[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryLiquidationTargetsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse} message QueryLiquidationTargetsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryLiquidationTargetsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.targets = [];
                        if (message.targets && message.targets.length) {
                            object.targets = [];
                            for (let j = 0; j < message.targets.length; ++j)
                                object.targets[j] = message.targets[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this QueryLiquidationTargetsResponse to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.QueryLiquidationTargetsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryLiquidationTargetsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryLiquidationTargetsResponse;
                })();

                v1beta1.GenesisState = (function() {

                    /**
                     * Properties of a GenesisState.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IGenesisState
                     * @property {umeenetwork.umee.leverage.v1beta1.IParams|null} [params] GenesisState params
                     * @property {Array.<umeenetwork.umee.leverage.v1beta1.IToken>|null} [registry] GenesisState registry
                     * @property {Array.<umeenetwork.umee.leverage.v1beta1.IAdjustedBorrow>|null} [adjustedBorrows] GenesisState adjustedBorrows
                     * @property {Array.<umeenetwork.umee.leverage.v1beta1.ICollateralSetting>|null} [collateralSettings] GenesisState collateralSettings
                     * @property {Array.<umeenetwork.umee.leverage.v1beta1.ICollateral>|null} [collateral] GenesisState collateral
                     * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [reserves] GenesisState reserves
                     * @property {number|Long|null} [lastInterestTime] GenesisState lastInterestTime
                     * @property {Array.<umeenetwork.umee.leverage.v1beta1.IBadDebt>|null} [badDebts] GenesisState badDebts
                     * @property {Array.<umeenetwork.umee.leverage.v1beta1.IInterestScalar>|null} [interestScalars] GenesisState interestScalars
                     * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [utokenSupply] GenesisState utokenSupply
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IGenesisState=} [properties] Properties to set
                     */
                    function GenesisState(properties) {
                        this.registry = [];
                        this.adjustedBorrows = [];
                        this.collateralSettings = [];
                        this.collateral = [];
                        this.reserves = [];
                        this.badDebts = [];
                        this.interestScalars = [];
                        this.utokenSupply = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisState params.
                     * @member {umeenetwork.umee.leverage.v1beta1.IParams|null|undefined} params
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.params = null;

                    /**
                     * GenesisState registry.
                     * @member {Array.<umeenetwork.umee.leverage.v1beta1.IToken>} registry
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.registry = $util.emptyArray;

                    /**
                     * GenesisState adjustedBorrows.
                     * @member {Array.<umeenetwork.umee.leverage.v1beta1.IAdjustedBorrow>} adjustedBorrows
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.adjustedBorrows = $util.emptyArray;

                    /**
                     * GenesisState collateralSettings.
                     * @member {Array.<umeenetwork.umee.leverage.v1beta1.ICollateralSetting>} collateralSettings
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.collateralSettings = $util.emptyArray;

                    /**
                     * GenesisState collateral.
                     * @member {Array.<umeenetwork.umee.leverage.v1beta1.ICollateral>} collateral
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.collateral = $util.emptyArray;

                    /**
                     * GenesisState reserves.
                     * @member {Array.<cosmos.base.v1beta1.ICoin>} reserves
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.reserves = $util.emptyArray;

                    /**
                     * GenesisState lastInterestTime.
                     * @member {number|Long} lastInterestTime
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.lastInterestTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * GenesisState badDebts.
                     * @member {Array.<umeenetwork.umee.leverage.v1beta1.IBadDebt>} badDebts
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.badDebts = $util.emptyArray;

                    /**
                     * GenesisState interestScalars.
                     * @member {Array.<umeenetwork.umee.leverage.v1beta1.IInterestScalar>} interestScalars
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.interestScalars = $util.emptyArray;

                    /**
                     * GenesisState utokenSupply.
                     * @member {Array.<cosmos.base.v1beta1.ICoin>} utokenSupply
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.utokenSupply = $util.emptyArray;

                    /**
                     * Creates a new GenesisState instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IGenesisState=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.GenesisState} GenesisState instance
                     */
                    GenesisState.create = function create(properties) {
                        return new GenesisState(properties);
                    };

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.umeenetwork.umee.leverage.v1beta1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.registry != null && message.registry.length)
                            for (let i = 0; i < message.registry.length; ++i)
                                $root.umeenetwork.umee.leverage.v1beta1.Token.encode(message.registry[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.adjustedBorrows != null && message.adjustedBorrows.length)
                            for (let i = 0; i < message.adjustedBorrows.length; ++i)
                                $root.umeenetwork.umee.leverage.v1beta1.AdjustedBorrow.encode(message.adjustedBorrows[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.collateralSettings != null && message.collateralSettings.length)
                            for (let i = 0; i < message.collateralSettings.length; ++i)
                                $root.umeenetwork.umee.leverage.v1beta1.CollateralSetting.encode(message.collateralSettings[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.collateral != null && message.collateral.length)
                            for (let i = 0; i < message.collateral.length; ++i)
                                $root.umeenetwork.umee.leverage.v1beta1.Collateral.encode(message.collateral[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.reserves != null && message.reserves.length)
                            for (let i = 0; i < message.reserves.length; ++i)
                                $root.cosmos.base.v1beta1.Coin.encode(message.reserves[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.lastInterestTime != null && Object.hasOwnProperty.call(message, "lastInterestTime"))
                            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.lastInterestTime);
                        if (message.badDebts != null && message.badDebts.length)
                            for (let i = 0; i < message.badDebts.length; ++i)
                                $root.umeenetwork.umee.leverage.v1beta1.BadDebt.encode(message.badDebts[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        if (message.interestScalars != null && message.interestScalars.length)
                            for (let i = 0; i < message.interestScalars.length; ++i)
                                $root.umeenetwork.umee.leverage.v1beta1.InterestScalar.encode(message.interestScalars[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.utokenSupply != null && message.utokenSupply.length)
                            for (let i = 0; i < message.utokenSupply.length; ++i)
                                $root.cosmos.base.v1beta1.Coin.encode(message.utokenSupply[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.GenesisState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.GenesisState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.params = $root.umeenetwork.umee.leverage.v1beta1.Params.decode(reader, reader.uint32());
                                break;
                            case 2:
                                if (!(message.registry && message.registry.length))
                                    message.registry = [];
                                message.registry.push($root.umeenetwork.umee.leverage.v1beta1.Token.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                if (!(message.adjustedBorrows && message.adjustedBorrows.length))
                                    message.adjustedBorrows = [];
                                message.adjustedBorrows.push($root.umeenetwork.umee.leverage.v1beta1.AdjustedBorrow.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                if (!(message.collateralSettings && message.collateralSettings.length))
                                    message.collateralSettings = [];
                                message.collateralSettings.push($root.umeenetwork.umee.leverage.v1beta1.CollateralSetting.decode(reader, reader.uint32()));
                                break;
                            case 5:
                                if (!(message.collateral && message.collateral.length))
                                    message.collateral = [];
                                message.collateral.push($root.umeenetwork.umee.leverage.v1beta1.Collateral.decode(reader, reader.uint32()));
                                break;
                            case 6:
                                if (!(message.reserves && message.reserves.length))
                                    message.reserves = [];
                                message.reserves.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                                break;
                            case 7:
                                message.lastInterestTime = reader.int64();
                                break;
                            case 8:
                                if (!(message.badDebts && message.badDebts.length))
                                    message.badDebts = [];
                                message.badDebts.push($root.umeenetwork.umee.leverage.v1beta1.BadDebt.decode(reader, reader.uint32()));
                                break;
                            case 9:
                                if (!(message.interestScalars && message.interestScalars.length))
                                    message.interestScalars = [];
                                message.interestScalars.push($root.umeenetwork.umee.leverage.v1beta1.InterestScalar.decode(reader, reader.uint32()));
                                break;
                            case 10:
                                if (!(message.utokenSupply && message.utokenSupply.length))
                                    message.utokenSupply = [];
                                message.utokenSupply.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisState message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            let error = $root.umeenetwork.umee.leverage.v1beta1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        if (message.registry != null && message.hasOwnProperty("registry")) {
                            if (!Array.isArray(message.registry))
                                return "registry: array expected";
                            for (let i = 0; i < message.registry.length; ++i) {
                                let error = $root.umeenetwork.umee.leverage.v1beta1.Token.verify(message.registry[i]);
                                if (error)
                                    return "registry." + error;
                            }
                        }
                        if (message.adjustedBorrows != null && message.hasOwnProperty("adjustedBorrows")) {
                            if (!Array.isArray(message.adjustedBorrows))
                                return "adjustedBorrows: array expected";
                            for (let i = 0; i < message.adjustedBorrows.length; ++i) {
                                let error = $root.umeenetwork.umee.leverage.v1beta1.AdjustedBorrow.verify(message.adjustedBorrows[i]);
                                if (error)
                                    return "adjustedBorrows." + error;
                            }
                        }
                        if (message.collateralSettings != null && message.hasOwnProperty("collateralSettings")) {
                            if (!Array.isArray(message.collateralSettings))
                                return "collateralSettings: array expected";
                            for (let i = 0; i < message.collateralSettings.length; ++i) {
                                let error = $root.umeenetwork.umee.leverage.v1beta1.CollateralSetting.verify(message.collateralSettings[i]);
                                if (error)
                                    return "collateralSettings." + error;
                            }
                        }
                        if (message.collateral != null && message.hasOwnProperty("collateral")) {
                            if (!Array.isArray(message.collateral))
                                return "collateral: array expected";
                            for (let i = 0; i < message.collateral.length; ++i) {
                                let error = $root.umeenetwork.umee.leverage.v1beta1.Collateral.verify(message.collateral[i]);
                                if (error)
                                    return "collateral." + error;
                            }
                        }
                        if (message.reserves != null && message.hasOwnProperty("reserves")) {
                            if (!Array.isArray(message.reserves))
                                return "reserves: array expected";
                            for (let i = 0; i < message.reserves.length; ++i) {
                                let error = $root.cosmos.base.v1beta1.Coin.verify(message.reserves[i]);
                                if (error)
                                    return "reserves." + error;
                            }
                        }
                        if (message.lastInterestTime != null && message.hasOwnProperty("lastInterestTime"))
                            if (!$util.isInteger(message.lastInterestTime) && !(message.lastInterestTime && $util.isInteger(message.lastInterestTime.low) && $util.isInteger(message.lastInterestTime.high)))
                                return "lastInterestTime: integer|Long expected";
                        if (message.badDebts != null && message.hasOwnProperty("badDebts")) {
                            if (!Array.isArray(message.badDebts))
                                return "badDebts: array expected";
                            for (let i = 0; i < message.badDebts.length; ++i) {
                                let error = $root.umeenetwork.umee.leverage.v1beta1.BadDebt.verify(message.badDebts[i]);
                                if (error)
                                    return "badDebts." + error;
                            }
                        }
                        if (message.interestScalars != null && message.hasOwnProperty("interestScalars")) {
                            if (!Array.isArray(message.interestScalars))
                                return "interestScalars: array expected";
                            for (let i = 0; i < message.interestScalars.length; ++i) {
                                let error = $root.umeenetwork.umee.leverage.v1beta1.InterestScalar.verify(message.interestScalars[i]);
                                if (error)
                                    return "interestScalars." + error;
                            }
                        }
                        if (message.utokenSupply != null && message.hasOwnProperty("utokenSupply")) {
                            if (!Array.isArray(message.utokenSupply))
                                return "utokenSupply: array expected";
                            for (let i = 0; i < message.utokenSupply.length; ++i) {
                                let error = $root.cosmos.base.v1beta1.Coin.verify(message.utokenSupply[i]);
                                if (error)
                                    return "utokenSupply." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.GenesisState} GenesisState
                     */
                    GenesisState.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.GenesisState)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.GenesisState();
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.params: object expected");
                            message.params = $root.umeenetwork.umee.leverage.v1beta1.Params.fromObject(object.params);
                        }
                        if (object.registry) {
                            if (!Array.isArray(object.registry))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.registry: array expected");
                            message.registry = [];
                            for (let i = 0; i < object.registry.length; ++i) {
                                if (typeof object.registry[i] !== "object")
                                    throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.registry: object expected");
                                message.registry[i] = $root.umeenetwork.umee.leverage.v1beta1.Token.fromObject(object.registry[i]);
                            }
                        }
                        if (object.adjustedBorrows) {
                            if (!Array.isArray(object.adjustedBorrows))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.adjustedBorrows: array expected");
                            message.adjustedBorrows = [];
                            for (let i = 0; i < object.adjustedBorrows.length; ++i) {
                                if (typeof object.adjustedBorrows[i] !== "object")
                                    throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.adjustedBorrows: object expected");
                                message.adjustedBorrows[i] = $root.umeenetwork.umee.leverage.v1beta1.AdjustedBorrow.fromObject(object.adjustedBorrows[i]);
                            }
                        }
                        if (object.collateralSettings) {
                            if (!Array.isArray(object.collateralSettings))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.collateralSettings: array expected");
                            message.collateralSettings = [];
                            for (let i = 0; i < object.collateralSettings.length; ++i) {
                                if (typeof object.collateralSettings[i] !== "object")
                                    throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.collateralSettings: object expected");
                                message.collateralSettings[i] = $root.umeenetwork.umee.leverage.v1beta1.CollateralSetting.fromObject(object.collateralSettings[i]);
                            }
                        }
                        if (object.collateral) {
                            if (!Array.isArray(object.collateral))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.collateral: array expected");
                            message.collateral = [];
                            for (let i = 0; i < object.collateral.length; ++i) {
                                if (typeof object.collateral[i] !== "object")
                                    throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.collateral: object expected");
                                message.collateral[i] = $root.umeenetwork.umee.leverage.v1beta1.Collateral.fromObject(object.collateral[i]);
                            }
                        }
                        if (object.reserves) {
                            if (!Array.isArray(object.reserves))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.reserves: array expected");
                            message.reserves = [];
                            for (let i = 0; i < object.reserves.length; ++i) {
                                if (typeof object.reserves[i] !== "object")
                                    throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.reserves: object expected");
                                message.reserves[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.reserves[i]);
                            }
                        }
                        if (object.lastInterestTime != null)
                            if ($util.Long)
                                (message.lastInterestTime = $util.Long.fromValue(object.lastInterestTime)).unsigned = false;
                            else if (typeof object.lastInterestTime === "string")
                                message.lastInterestTime = parseInt(object.lastInterestTime, 10);
                            else if (typeof object.lastInterestTime === "number")
                                message.lastInterestTime = object.lastInterestTime;
                            else if (typeof object.lastInterestTime === "object")
                                message.lastInterestTime = new $util.LongBits(object.lastInterestTime.low >>> 0, object.lastInterestTime.high >>> 0).toNumber();
                        if (object.badDebts) {
                            if (!Array.isArray(object.badDebts))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.badDebts: array expected");
                            message.badDebts = [];
                            for (let i = 0; i < object.badDebts.length; ++i) {
                                if (typeof object.badDebts[i] !== "object")
                                    throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.badDebts: object expected");
                                message.badDebts[i] = $root.umeenetwork.umee.leverage.v1beta1.BadDebt.fromObject(object.badDebts[i]);
                            }
                        }
                        if (object.interestScalars) {
                            if (!Array.isArray(object.interestScalars))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.interestScalars: array expected");
                            message.interestScalars = [];
                            for (let i = 0; i < object.interestScalars.length; ++i) {
                                if (typeof object.interestScalars[i] !== "object")
                                    throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.interestScalars: object expected");
                                message.interestScalars[i] = $root.umeenetwork.umee.leverage.v1beta1.InterestScalar.fromObject(object.interestScalars[i]);
                            }
                        }
                        if (object.utokenSupply) {
                            if (!Array.isArray(object.utokenSupply))
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.utokenSupply: array expected");
                            message.utokenSupply = [];
                            for (let i = 0; i < object.utokenSupply.length; ++i) {
                                if (typeof object.utokenSupply[i] !== "object")
                                    throw TypeError(".umeenetwork.umee.leverage.v1beta1.GenesisState.utokenSupply: object expected");
                                message.utokenSupply[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.utokenSupply[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.GenesisState} message GenesisState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.registry = [];
                            object.adjustedBorrows = [];
                            object.collateralSettings = [];
                            object.collateral = [];
                            object.reserves = [];
                            object.badDebts = [];
                            object.interestScalars = [];
                            object.utokenSupply = [];
                        }
                        if (options.defaults) {
                            object.params = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, false);
                                object.lastInterestTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.lastInterestTime = options.longs === String ? "0" : 0;
                        }
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.umeenetwork.umee.leverage.v1beta1.Params.toObject(message.params, options);
                        if (message.registry && message.registry.length) {
                            object.registry = [];
                            for (let j = 0; j < message.registry.length; ++j)
                                object.registry[j] = $root.umeenetwork.umee.leverage.v1beta1.Token.toObject(message.registry[j], options);
                        }
                        if (message.adjustedBorrows && message.adjustedBorrows.length) {
                            object.adjustedBorrows = [];
                            for (let j = 0; j < message.adjustedBorrows.length; ++j)
                                object.adjustedBorrows[j] = $root.umeenetwork.umee.leverage.v1beta1.AdjustedBorrow.toObject(message.adjustedBorrows[j], options);
                        }
                        if (message.collateralSettings && message.collateralSettings.length) {
                            object.collateralSettings = [];
                            for (let j = 0; j < message.collateralSettings.length; ++j)
                                object.collateralSettings[j] = $root.umeenetwork.umee.leverage.v1beta1.CollateralSetting.toObject(message.collateralSettings[j], options);
                        }
                        if (message.collateral && message.collateral.length) {
                            object.collateral = [];
                            for (let j = 0; j < message.collateral.length; ++j)
                                object.collateral[j] = $root.umeenetwork.umee.leverage.v1beta1.Collateral.toObject(message.collateral[j], options);
                        }
                        if (message.reserves && message.reserves.length) {
                            object.reserves = [];
                            for (let j = 0; j < message.reserves.length; ++j)
                                object.reserves[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.reserves[j], options);
                        }
                        if (message.lastInterestTime != null && message.hasOwnProperty("lastInterestTime"))
                            if (typeof message.lastInterestTime === "number")
                                object.lastInterestTime = options.longs === String ? String(message.lastInterestTime) : message.lastInterestTime;
                            else
                                object.lastInterestTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastInterestTime) : options.longs === Number ? new $util.LongBits(message.lastInterestTime.low >>> 0, message.lastInterestTime.high >>> 0).toNumber() : message.lastInterestTime;
                        if (message.badDebts && message.badDebts.length) {
                            object.badDebts = [];
                            for (let j = 0; j < message.badDebts.length; ++j)
                                object.badDebts[j] = $root.umeenetwork.umee.leverage.v1beta1.BadDebt.toObject(message.badDebts[j], options);
                        }
                        if (message.interestScalars && message.interestScalars.length) {
                            object.interestScalars = [];
                            for (let j = 0; j < message.interestScalars.length; ++j)
                                object.interestScalars[j] = $root.umeenetwork.umee.leverage.v1beta1.InterestScalar.toObject(message.interestScalars[j], options);
                        }
                        if (message.utokenSupply && message.utokenSupply.length) {
                            object.utokenSupply = [];
                            for (let j = 0; j < message.utokenSupply.length; ++j)
                                object.utokenSupply[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.utokenSupply[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this GenesisState to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.GenesisState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisState;
                })();

                v1beta1.AdjustedBorrow = (function() {

                    /**
                     * Properties of an AdjustedBorrow.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IAdjustedBorrow
                     * @property {string|null} [address] AdjustedBorrow address
                     * @property {cosmos.base.v1beta1.IDecCoin|null} [amount] AdjustedBorrow amount
                     */

                    /**
                     * Constructs a new AdjustedBorrow.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents an AdjustedBorrow.
                     * @implements IAdjustedBorrow
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IAdjustedBorrow=} [properties] Properties to set
                     */
                    function AdjustedBorrow(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * AdjustedBorrow address.
                     * @member {string} address
                     * @memberof umeenetwork.umee.leverage.v1beta1.AdjustedBorrow
                     * @instance
                     */
                    AdjustedBorrow.prototype.address = "";

                    /**
                     * AdjustedBorrow amount.
                     * @member {cosmos.base.v1beta1.IDecCoin|null|undefined} amount
                     * @memberof umeenetwork.umee.leverage.v1beta1.AdjustedBorrow
                     * @instance
                     */
                    AdjustedBorrow.prototype.amount = null;

                    /**
                     * Creates a new AdjustedBorrow instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.AdjustedBorrow
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IAdjustedBorrow=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.AdjustedBorrow} AdjustedBorrow instance
                     */
                    AdjustedBorrow.create = function create(properties) {
                        return new AdjustedBorrow(properties);
                    };

                    /**
                     * Encodes the specified AdjustedBorrow message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.AdjustedBorrow.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.AdjustedBorrow
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IAdjustedBorrow} message AdjustedBorrow message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AdjustedBorrow.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.cosmos.base.v1beta1.DecCoin.encode(message.amount, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified AdjustedBorrow message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.AdjustedBorrow.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.AdjustedBorrow
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IAdjustedBorrow} message AdjustedBorrow message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AdjustedBorrow.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an AdjustedBorrow message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.AdjustedBorrow
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.AdjustedBorrow} AdjustedBorrow
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AdjustedBorrow.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.AdjustedBorrow();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = reader.string();
                                break;
                            case 2:
                                message.amount = $root.cosmos.base.v1beta1.DecCoin.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an AdjustedBorrow message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.AdjustedBorrow
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.AdjustedBorrow} AdjustedBorrow
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AdjustedBorrow.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an AdjustedBorrow message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.AdjustedBorrow
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AdjustedBorrow.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            let error = $root.cosmos.base.v1beta1.DecCoin.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates an AdjustedBorrow message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.AdjustedBorrow
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.AdjustedBorrow} AdjustedBorrow
                     */
                    AdjustedBorrow.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.AdjustedBorrow)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.AdjustedBorrow();
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.AdjustedBorrow.amount: object expected");
                            message.amount = $root.cosmos.base.v1beta1.DecCoin.fromObject(object.amount);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an AdjustedBorrow message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.AdjustedBorrow
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.AdjustedBorrow} message AdjustedBorrow
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AdjustedBorrow.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.address = "";
                            object.amount = null;
                        }
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.cosmos.base.v1beta1.DecCoin.toObject(message.amount, options);
                        return object;
                    };

                    /**
                     * Converts this AdjustedBorrow to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.AdjustedBorrow
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AdjustedBorrow.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return AdjustedBorrow;
                })();

                v1beta1.CollateralSetting = (function() {

                    /**
                     * Properties of a CollateralSetting.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface ICollateralSetting
                     * @property {string|null} [address] CollateralSetting address
                     * @property {string|null} [denom] CollateralSetting denom
                     */

                    /**
                     * Constructs a new CollateralSetting.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a CollateralSetting.
                     * @implements ICollateralSetting
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.ICollateralSetting=} [properties] Properties to set
                     */
                    function CollateralSetting(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CollateralSetting address.
                     * @member {string} address
                     * @memberof umeenetwork.umee.leverage.v1beta1.CollateralSetting
                     * @instance
                     */
                    CollateralSetting.prototype.address = "";

                    /**
                     * CollateralSetting denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.CollateralSetting
                     * @instance
                     */
                    CollateralSetting.prototype.denom = "";

                    /**
                     * Creates a new CollateralSetting instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.CollateralSetting
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.ICollateralSetting=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.CollateralSetting} CollateralSetting instance
                     */
                    CollateralSetting.create = function create(properties) {
                        return new CollateralSetting(properties);
                    };

                    /**
                     * Encodes the specified CollateralSetting message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.CollateralSetting.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.CollateralSetting
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.ICollateralSetting} message CollateralSetting message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CollateralSetting.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified CollateralSetting message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.CollateralSetting.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.CollateralSetting
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.ICollateralSetting} message CollateralSetting message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CollateralSetting.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CollateralSetting message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.CollateralSetting
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.CollateralSetting} CollateralSetting
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CollateralSetting.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.CollateralSetting();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = reader.string();
                                break;
                            case 2:
                                message.denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CollateralSetting message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.CollateralSetting
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.CollateralSetting} CollateralSetting
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CollateralSetting.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CollateralSetting message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.CollateralSetting
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CollateralSetting.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a CollateralSetting message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.CollateralSetting
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.CollateralSetting} CollateralSetting
                     */
                    CollateralSetting.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.CollateralSetting)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.CollateralSetting();
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a CollateralSetting message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.CollateralSetting
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.CollateralSetting} message CollateralSetting
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CollateralSetting.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.address = "";
                            object.denom = "";
                        }
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        return object;
                    };

                    /**
                     * Converts this CollateralSetting to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.CollateralSetting
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CollateralSetting.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return CollateralSetting;
                })();

                v1beta1.Collateral = (function() {

                    /**
                     * Properties of a Collateral.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface ICollateral
                     * @property {string|null} [address] Collateral address
                     * @property {cosmos.base.v1beta1.ICoin|null} [amount] Collateral amount
                     */

                    /**
                     * Constructs a new Collateral.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a Collateral.
                     * @implements ICollateral
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.ICollateral=} [properties] Properties to set
                     */
                    function Collateral(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Collateral address.
                     * @member {string} address
                     * @memberof umeenetwork.umee.leverage.v1beta1.Collateral
                     * @instance
                     */
                    Collateral.prototype.address = "";

                    /**
                     * Collateral amount.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
                     * @memberof umeenetwork.umee.leverage.v1beta1.Collateral
                     * @instance
                     */
                    Collateral.prototype.amount = null;

                    /**
                     * Creates a new Collateral instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.Collateral
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.ICollateral=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.Collateral} Collateral instance
                     */
                    Collateral.create = function create(properties) {
                        return new Collateral(properties);
                    };

                    /**
                     * Encodes the specified Collateral message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.Collateral.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.Collateral
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.ICollateral} message Collateral message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Collateral.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.amount, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Collateral message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.Collateral.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.Collateral
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.ICollateral} message Collateral message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Collateral.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Collateral message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.Collateral
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.Collateral} Collateral
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Collateral.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.Collateral();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = reader.string();
                                break;
                            case 2:
                                message.amount = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Collateral message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.Collateral
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.Collateral} Collateral
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Collateral.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Collateral message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.Collateral
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Collateral.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Collateral message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.Collateral
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.Collateral} Collateral
                     */
                    Collateral.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.Collateral)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.Collateral();
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".umeenetwork.umee.leverage.v1beta1.Collateral.amount: object expected");
                            message.amount = $root.cosmos.base.v1beta1.Coin.fromObject(object.amount);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Collateral message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.Collateral
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.Collateral} message Collateral
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Collateral.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.address = "";
                            object.amount = null;
                        }
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.cosmos.base.v1beta1.Coin.toObject(message.amount, options);
                        return object;
                    };

                    /**
                     * Converts this Collateral to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.Collateral
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Collateral.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Collateral;
                })();

                v1beta1.BadDebt = (function() {

                    /**
                     * Properties of a BadDebt.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IBadDebt
                     * @property {string|null} [address] BadDebt address
                     * @property {string|null} [denom] BadDebt denom
                     */

                    /**
                     * Constructs a new BadDebt.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents a BadDebt.
                     * @implements IBadDebt
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IBadDebt=} [properties] Properties to set
                     */
                    function BadDebt(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * BadDebt address.
                     * @member {string} address
                     * @memberof umeenetwork.umee.leverage.v1beta1.BadDebt
                     * @instance
                     */
                    BadDebt.prototype.address = "";

                    /**
                     * BadDebt denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.BadDebt
                     * @instance
                     */
                    BadDebt.prototype.denom = "";

                    /**
                     * Creates a new BadDebt instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.BadDebt
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IBadDebt=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.BadDebt} BadDebt instance
                     */
                    BadDebt.create = function create(properties) {
                        return new BadDebt(properties);
                    };

                    /**
                     * Encodes the specified BadDebt message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.BadDebt.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.BadDebt
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IBadDebt} message BadDebt message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BadDebt.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified BadDebt message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.BadDebt.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.BadDebt
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IBadDebt} message BadDebt message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BadDebt.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a BadDebt message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.BadDebt
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.BadDebt} BadDebt
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BadDebt.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.BadDebt();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = reader.string();
                                break;
                            case 2:
                                message.denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a BadDebt message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.BadDebt
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.BadDebt} BadDebt
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BadDebt.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a BadDebt message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.BadDebt
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BadDebt.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a BadDebt message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.BadDebt
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.BadDebt} BadDebt
                     */
                    BadDebt.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.BadDebt)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.BadDebt();
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a BadDebt message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.BadDebt
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.BadDebt} message BadDebt
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BadDebt.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.address = "";
                            object.denom = "";
                        }
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        return object;
                    };

                    /**
                     * Converts this BadDebt to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.BadDebt
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BadDebt.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return BadDebt;
                })();

                v1beta1.InterestScalar = (function() {

                    /**
                     * Properties of an InterestScalar.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @interface IInterestScalar
                     * @property {string|null} [denom] InterestScalar denom
                     * @property {string|null} [scalar] InterestScalar scalar
                     */

                    /**
                     * Constructs a new InterestScalar.
                     * @memberof umeenetwork.umee.leverage.v1beta1
                     * @classdesc Represents an InterestScalar.
                     * @implements IInterestScalar
                     * @constructor
                     * @param {umeenetwork.umee.leverage.v1beta1.IInterestScalar=} [properties] Properties to set
                     */
                    function InterestScalar(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * InterestScalar denom.
                     * @member {string} denom
                     * @memberof umeenetwork.umee.leverage.v1beta1.InterestScalar
                     * @instance
                     */
                    InterestScalar.prototype.denom = "";

                    /**
                     * InterestScalar scalar.
                     * @member {string} scalar
                     * @memberof umeenetwork.umee.leverage.v1beta1.InterestScalar
                     * @instance
                     */
                    InterestScalar.prototype.scalar = "";

                    /**
                     * Creates a new InterestScalar instance using the specified properties.
                     * @function create
                     * @memberof umeenetwork.umee.leverage.v1beta1.InterestScalar
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IInterestScalar=} [properties] Properties to set
                     * @returns {umeenetwork.umee.leverage.v1beta1.InterestScalar} InterestScalar instance
                     */
                    InterestScalar.create = function create(properties) {
                        return new InterestScalar(properties);
                    };

                    /**
                     * Encodes the specified InterestScalar message. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.InterestScalar.verify|verify} messages.
                     * @function encode
                     * @memberof umeenetwork.umee.leverage.v1beta1.InterestScalar
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IInterestScalar} message InterestScalar message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InterestScalar.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        if (message.scalar != null && Object.hasOwnProperty.call(message, "scalar"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.scalar);
                        return writer;
                    };

                    /**
                     * Encodes the specified InterestScalar message, length delimited. Does not implicitly {@link umeenetwork.umee.leverage.v1beta1.InterestScalar.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.InterestScalar
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.IInterestScalar} message InterestScalar message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InterestScalar.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an InterestScalar message from the specified reader or buffer.
                     * @function decode
                     * @memberof umeenetwork.umee.leverage.v1beta1.InterestScalar
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {umeenetwork.umee.leverage.v1beta1.InterestScalar} InterestScalar
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InterestScalar.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.umeenetwork.umee.leverage.v1beta1.InterestScalar();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            case 2:
                                message.scalar = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an InterestScalar message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof umeenetwork.umee.leverage.v1beta1.InterestScalar
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {umeenetwork.umee.leverage.v1beta1.InterestScalar} InterestScalar
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InterestScalar.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an InterestScalar message.
                     * @function verify
                     * @memberof umeenetwork.umee.leverage.v1beta1.InterestScalar
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    InterestScalar.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.scalar != null && message.hasOwnProperty("scalar"))
                            if (!$util.isString(message.scalar))
                                return "scalar: string expected";
                        return null;
                    };

                    /**
                     * Creates an InterestScalar message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.InterestScalar
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {umeenetwork.umee.leverage.v1beta1.InterestScalar} InterestScalar
                     */
                    InterestScalar.fromObject = function fromObject(object) {
                        if (object instanceof $root.umeenetwork.umee.leverage.v1beta1.InterestScalar)
                            return object;
                        let message = new $root.umeenetwork.umee.leverage.v1beta1.InterestScalar();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.scalar != null)
                            message.scalar = String(object.scalar);
                        return message;
                    };

                    /**
                     * Creates a plain object from an InterestScalar message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof umeenetwork.umee.leverage.v1beta1.InterestScalar
                     * @static
                     * @param {umeenetwork.umee.leverage.v1beta1.InterestScalar} message InterestScalar
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    InterestScalar.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.denom = "";
                            object.scalar = "";
                        }
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.scalar != null && message.hasOwnProperty("scalar"))
                            object.scalar = message.scalar;
                        return object;
                    };

                    /**
                     * Converts this InterestScalar to JSON.
                     * @function toJSON
                     * @memberof umeenetwork.umee.leverage.v1beta1.InterestScalar
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    InterestScalar.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return InterestScalar;
                })();

                return v1beta1;
            })();

            return leverage;
        })();

        return umee;
    })();

    return umeenetwork;
})();

export const google = $root.google = (() => {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    const google = {};

    google.api = (function() {

        /**
         * Namespace api.
         * @memberof google
         * @namespace
         */
        const api = {};

        api.Http = (function() {

            /**
             * Properties of a Http.
             * @memberof google.api
             * @interface IHttp
             * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
             */

            /**
             * Constructs a new Http.
             * @memberof google.api
             * @classdesc Represents a Http.
             * @implements IHttp
             * @constructor
             * @param {google.api.IHttp=} [properties] Properties to set
             */
            function Http(properties) {
                this.rules = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Http rules.
             * @member {Array.<google.api.IHttpRule>} rules
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.rules = $util.emptyArray;

            /**
             * Creates a new Http instance using the specified properties.
             * @function create
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp=} [properties] Properties to set
             * @returns {google.api.Http} Http instance
             */
            Http.create = function create(properties) {
                return new Http(properties);
            };

            /**
             * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encode
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rules != null && message.rules.length)
                    for (let i = 0; i < message.rules.length; ++i)
                        $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Http message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.rules && message.rules.length))
                            message.rules = [];
                        message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Http message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Http message.
             * @function verify
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Http.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rules != null && message.hasOwnProperty("rules")) {
                    if (!Array.isArray(message.rules))
                        return "rules: array expected";
                    for (let i = 0; i < message.rules.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.rules[i]);
                        if (error)
                            return "rules." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Http message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.Http} Http
             */
            Http.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.Http)
                    return object;
                let message = new $root.google.api.Http();
                if (object.rules) {
                    if (!Array.isArray(object.rules))
                        throw TypeError(".google.api.Http.rules: array expected");
                    message.rules = [];
                    for (let i = 0; i < object.rules.length; ++i) {
                        if (typeof object.rules[i] !== "object")
                            throw TypeError(".google.api.Http.rules: object expected");
                        message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a Http message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.Http
             * @static
             * @param {google.api.Http} message Http
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Http.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.rules = [];
                if (message.rules && message.rules.length) {
                    object.rules = [];
                    for (let j = 0; j < message.rules.length; ++j)
                        object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                }
                return object;
            };

            /**
             * Converts this Http to JSON.
             * @function toJSON
             * @memberof google.api.Http
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Http.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Http;
        })();

        api.HttpRule = (function() {

            /**
             * Properties of a HttpRule.
             * @memberof google.api
             * @interface IHttpRule
             * @property {string|null} [get] HttpRule get
             * @property {string|null} [put] HttpRule put
             * @property {string|null} [post] HttpRule post
             * @property {string|null} ["delete"] HttpRule delete
             * @property {string|null} [patch] HttpRule patch
             * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
             * @property {string|null} [selector] HttpRule selector
             * @property {string|null} [body] HttpRule body
             * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
             */

            /**
             * Constructs a new HttpRule.
             * @memberof google.api
             * @classdesc Represents a HttpRule.
             * @implements IHttpRule
             * @constructor
             * @param {google.api.IHttpRule=} [properties] Properties to set
             */
            function HttpRule(properties) {
                this.additionalBindings = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HttpRule get.
             * @member {string|null|undefined} get
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.get = null;

            /**
             * HttpRule put.
             * @member {string|null|undefined} put
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.put = null;

            /**
             * HttpRule post.
             * @member {string|null|undefined} post
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.post = null;

            /**
             * HttpRule delete.
             * @member {string|null|undefined} delete
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype["delete"] = null;

            /**
             * HttpRule patch.
             * @member {string|null|undefined} patch
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.patch = null;

            /**
             * HttpRule custom.
             * @member {google.api.ICustomHttpPattern|null|undefined} custom
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.custom = null;

            /**
             * HttpRule selector.
             * @member {string} selector
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.selector = "";

            /**
             * HttpRule body.
             * @member {string} body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.body = "";

            /**
             * HttpRule additionalBindings.
             * @member {Array.<google.api.IHttpRule>} additionalBindings
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.additionalBindings = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * HttpRule pattern.
             * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
             * @memberof google.api.HttpRule
             * @instance
             */
            Object.defineProperty(HttpRule.prototype, "pattern", {
                get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new HttpRule instance using the specified properties.
             * @function create
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule=} [properties] Properties to set
             * @returns {google.api.HttpRule} HttpRule instance
             */
            HttpRule.create = function create(properties) {
                return new HttpRule(properties);
            };

            /**
             * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encode
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                    $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.additionalBindings != null && message.additionalBindings.length)
                    for (let i = 0; i < message.additionalBindings.length; ++i)
                        $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.get = reader.string();
                        break;
                    case 3:
                        message.put = reader.string();
                        break;
                    case 4:
                        message.post = reader.string();
                        break;
                    case 5:
                        message["delete"] = reader.string();
                        break;
                    case 6:
                        message.patch = reader.string();
                        break;
                    case 8:
                        message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                        break;
                    case 1:
                        message.selector = reader.string();
                        break;
                    case 7:
                        message.body = reader.string();
                        break;
                    case 11:
                        if (!(message.additionalBindings && message.additionalBindings.length))
                            message.additionalBindings = [];
                        message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HttpRule message.
             * @function verify
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HttpRule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.get != null && message.hasOwnProperty("get")) {
                    properties.pattern = 1;
                    if (!$util.isString(message.get))
                        return "get: string expected";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.put))
                        return "put: string expected";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.post))
                        return "post: string expected";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message["delete"]))
                        return "delete: string expected";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.patch))
                        return "patch: string expected";
                }
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    {
                        let error = $root.google.api.CustomHttpPattern.verify(message.custom);
                        if (error)
                            return "custom." + error;
                    }
                }
                if (message.selector != null && message.hasOwnProperty("selector"))
                    if (!$util.isString(message.selector))
                        return "selector: string expected";
                if (message.body != null && message.hasOwnProperty("body"))
                    if (!$util.isString(message.body))
                        return "body: string expected";
                if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                    if (!Array.isArray(message.additionalBindings))
                        return "additionalBindings: array expected";
                    for (let i = 0; i < message.additionalBindings.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                        if (error)
                            return "additionalBindings." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.HttpRule} HttpRule
             */
            HttpRule.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.HttpRule)
                    return object;
                let message = new $root.google.api.HttpRule();
                if (object.get != null)
                    message.get = String(object.get);
                if (object.put != null)
                    message.put = String(object.put);
                if (object.post != null)
                    message.post = String(object.post);
                if (object["delete"] != null)
                    message["delete"] = String(object["delete"]);
                if (object.patch != null)
                    message.patch = String(object.patch);
                if (object.custom != null) {
                    if (typeof object.custom !== "object")
                        throw TypeError(".google.api.HttpRule.custom: object expected");
                    message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                }
                if (object.selector != null)
                    message.selector = String(object.selector);
                if (object.body != null)
                    message.body = String(object.body);
                if (object.additionalBindings) {
                    if (!Array.isArray(object.additionalBindings))
                        throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                    message.additionalBindings = [];
                    for (let i = 0; i < object.additionalBindings.length; ++i) {
                        if (typeof object.additionalBindings[i] !== "object")
                            throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                        message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.HttpRule} message HttpRule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HttpRule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.additionalBindings = [];
                if (options.defaults) {
                    object.selector = "";
                    object.body = "";
                }
                if (message.selector != null && message.hasOwnProperty("selector"))
                    object.selector = message.selector;
                if (message.get != null && message.hasOwnProperty("get")) {
                    object.get = message.get;
                    if (options.oneofs)
                        object.pattern = "get";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    object.put = message.put;
                    if (options.oneofs)
                        object.pattern = "put";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    object.post = message.post;
                    if (options.oneofs)
                        object.pattern = "post";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    object["delete"] = message["delete"];
                    if (options.oneofs)
                        object.pattern = "delete";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    object.patch = message.patch;
                    if (options.oneofs)
                        object.pattern = "patch";
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = message.body;
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                    if (options.oneofs)
                        object.pattern = "custom";
                }
                if (message.additionalBindings && message.additionalBindings.length) {
                    object.additionalBindings = [];
                    for (let j = 0; j < message.additionalBindings.length; ++j)
                        object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                }
                return object;
            };

            /**
             * Converts this HttpRule to JSON.
             * @function toJSON
             * @memberof google.api.HttpRule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HttpRule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HttpRule;
        })();

        api.CustomHttpPattern = (function() {

            /**
             * Properties of a CustomHttpPattern.
             * @memberof google.api
             * @interface ICustomHttpPattern
             * @property {string|null} [kind] CustomHttpPattern kind
             * @property {string|null} [path] CustomHttpPattern path
             */

            /**
             * Constructs a new CustomHttpPattern.
             * @memberof google.api
             * @classdesc Represents a CustomHttpPattern.
             * @implements ICustomHttpPattern
             * @constructor
             * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
             */
            function CustomHttpPattern(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CustomHttpPattern kind.
             * @member {string} kind
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.kind = "";

            /**
             * CustomHttpPattern path.
             * @member {string} path
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.path = "";

            /**
             * Creates a new CustomHttpPattern instance using the specified properties.
             * @function create
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
             */
            CustomHttpPattern.create = function create(properties) {
                return new CustomHttpPattern(properties);
            };

            /**
             * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                return writer;
            };

            /**
             * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.kind = reader.string();
                        break;
                    case 2:
                        message.path = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CustomHttpPattern message.
             * @function verify
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CustomHttpPattern.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.kind != null && message.hasOwnProperty("kind"))
                    if (!$util.isString(message.kind))
                        return "kind: string expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isString(message.path))
                        return "path: string expected";
                return null;
            };

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             */
            CustomHttpPattern.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.CustomHttpPattern)
                    return object;
                let message = new $root.google.api.CustomHttpPattern();
                if (object.kind != null)
                    message.kind = String(object.kind);
                if (object.path != null)
                    message.path = String(object.path);
                return message;
            };

            /**
             * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.CustomHttpPattern} message CustomHttpPattern
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CustomHttpPattern.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.kind = "";
                    object.path = "";
                }
                if (message.kind != null && message.hasOwnProperty("kind"))
                    object.kind = message.kind;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                return object;
            };

            /**
             * Converts this CustomHttpPattern to JSON.
             * @function toJSON
             * @memberof google.api.CustomHttpPattern
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CustomHttpPattern.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CustomHttpPattern;
        })();

        return api;
    })();

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        const protobuf = {};

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Creates a new FileDescriptorSet instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
             */
            FileDescriptorSet.create = function create(properties) {
                return new FileDescriptorSet(properties);
            };

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.file != null && message.file.length)
                    for (let i = 0; i < message.file.length; ++i)
                        $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.file && message.file.length))
                            message.file = [];
                        message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (let i = 0; i < message.file.length; ++i) {
                        let error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (let i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (let j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
             * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.publicDependency = [];
                this.weakDependency = [];
                this.messageType = [];
                this.enumType = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto publicDependency.
             * @member {Array.<number>} publicDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;

            /**
             * FileDescriptorProto weakDependency.
             * @member {Array.<number>} weakDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;

            /**
             * FileDescriptorProto messageType.
             * @member {Array.<google.protobuf.IDescriptorProto>} messageType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.messageType = $util.emptyArray;

            /**
             * FileDescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto sourceCodeInfo.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.sourceCodeInfo = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Creates a new FileDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
             */
            FileDescriptorProto.create = function create(properties) {
                return new FileDescriptorProto(properties);
            };

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                if (message.dependency != null && message.dependency.length)
                    for (let i = 0; i < message.dependency.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                if (message.messageType != null && message.messageType.length)
                    for (let i = 0; i < message.messageType.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.enumType != null && message.enumType.length)
                    for (let i = 0; i < message.enumType.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.service != null && message.service.length)
                    for (let i = 0; i < message.service.length; ++i)
                        $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                    $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.publicDependency != null && message.publicDependency.length)
                    for (let i = 0; i < message.publicDependency.length; ++i)
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                if (message.weakDependency != null && message.weakDependency.length)
                    for (let i = 0; i < message.weakDependency.length; ++i)
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message["package"] = reader.string();
                        break;
                    case 3:
                        if (!(message.dependency && message.dependency.length))
                            message.dependency = [];
                        message.dependency.push(reader.string());
                        break;
                    case 10:
                        if (!(message.publicDependency && message.publicDependency.length))
                            message.publicDependency = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.publicDependency.push(reader.int32());
                        } else
                            message.publicDependency.push(reader.int32());
                        break;
                    case 11:
                        if (!(message.weakDependency && message.weakDependency.length))
                            message.weakDependency = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.weakDependency.push(reader.int32());
                        } else
                            message.weakDependency.push(reader.int32());
                        break;
                    case 4:
                        if (!(message.messageType && message.messageType.length))
                            message.messageType = [];
                        message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.enumType && message.enumType.length))
                            message.enumType = [];
                        message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.service && message.service.length))
                            message.service = [];
                        message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.syntax = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (let i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                    if (!Array.isArray(message.publicDependency))
                        return "publicDependency: array expected";
                    for (let i = 0; i < message.publicDependency.length; ++i)
                        if (!$util.isInteger(message.publicDependency[i]))
                            return "publicDependency: integer[] expected";
                }
                if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                    if (!Array.isArray(message.weakDependency))
                        return "weakDependency: array expected";
                    for (let i = 0; i < message.weakDependency.length; ++i)
                        if (!$util.isInteger(message.weakDependency[i]))
                            return "weakDependency: integer[] expected";
                }
                if (message.messageType != null && message.hasOwnProperty("messageType")) {
                    if (!Array.isArray(message.messageType))
                        return "messageType: array expected";
                    for (let i = 0; i < message.messageType.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                        if (error)
                            return "messageType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (let i = 0; i < message.enumType.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (let i = 0; i < message.service.length; ++i) {
                        let error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                    let error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                    if (error)
                        return "sourceCodeInfo." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (let i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.publicDependency) {
                    if (!Array.isArray(object.publicDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                    message.publicDependency = [];
                    for (let i = 0; i < object.publicDependency.length; ++i)
                        message.publicDependency[i] = object.publicDependency[i] | 0;
                }
                if (object.weakDependency) {
                    if (!Array.isArray(object.weakDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                    message.weakDependency = [];
                    for (let i = 0; i < object.weakDependency.length; ++i)
                        message.weakDependency[i] = object.weakDependency[i] | 0;
                }
                if (object.messageType) {
                    if (!Array.isArray(object.messageType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                    message.messageType = [];
                    for (let i = 0; i < object.messageType.length; ++i) {
                        if (typeof object.messageType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                        message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (let i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (let i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.sourceCodeInfo != null) {
                    if (typeof object.sourceCodeInfo !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                    message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.messageType = [];
                    object.enumType = [];
                    object.service = [];
                    object.extension = [];
                    object.publicDependency = [];
                    object.weakDependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.sourceCodeInfo = null;
                    object.syntax = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (let j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.messageType && message.messageType.length) {
                    object.messageType = [];
                    for (let j = 0; j < message.messageType.length; ++j)
                        object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (let j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (let j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                    object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                if (message.publicDependency && message.publicDependency.length) {
                    object.publicDependency = [];
                    for (let j = 0; j < message.publicDependency.length; ++j)
                        object.publicDependency[j] = message.publicDependency[j];
                }
                if (message.weakDependency && message.weakDependency.length) {
                    object.weakDependency = [];
                    for (let j = 0; j < message.weakDependency.length; ++j)
                        object.weakDependency[j] = message.weakDependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nestedType = [];
                this.enumType = [];
                this.extensionRange = [];
                this.oneofDecl = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nestedType.
             * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nestedType = $util.emptyArray;

            /**
             * DescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * DescriptorProto extensionRange.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extensionRange = $util.emptyArray;

            /**
             * DescriptorProto oneofDecl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reservedRange.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * DescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Creates a new DescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
             */
            DescriptorProto.create = function create(properties) {
                return new DescriptorProto(properties);
            };

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.field != null && message.field.length)
                    for (let i = 0; i < message.field.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.nestedType != null && message.nestedType.length)
                    for (let i = 0; i < message.nestedType.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.enumType != null && message.enumType.length)
                    for (let i = 0; i < message.enumType.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.extensionRange != null && message.extensionRange.length)
                    for (let i = 0; i < message.extensionRange.length; ++i)
                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.oneofDecl != null && message.oneofDecl.length)
                    for (let i = 0; i < message.oneofDecl.length; ++i)
                        $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.reservedRange != null && message.reservedRange.length)
                    for (let i = 0; i < message.reservedRange.length; ++i)
                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.reservedName != null && message.reservedName.length)
                    for (let i = 0; i < message.reservedName.length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                return writer;
            };

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.field && message.field.length))
                            message.field = [];
                        message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.nestedType && message.nestedType.length))
                            message.nestedType = [];
                        message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.enumType && message.enumType.length))
                            message.enumType = [];
                        message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.extensionRange && message.extensionRange.length))
                            message.extensionRange = [];
                        message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        if (!(message.oneofDecl && message.oneofDecl.length))
                            message.oneofDecl = [];
                        message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        if (!(message.reservedRange && message.reservedRange.length))
                            message.reservedRange = [];
                        message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                        break;
                    case 10:
                        if (!(message.reservedName && message.reservedName.length))
                            message.reservedName = [];
                        message.reservedName.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (let i = 0; i < message.field.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                    if (!Array.isArray(message.nestedType))
                        return "nestedType: array expected";
                    for (let i = 0; i < message.nestedType.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                        if (error)
                            return "nestedType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (let i = 0; i < message.enumType.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                    if (!Array.isArray(message.extensionRange))
                        return "extensionRange: array expected";
                    for (let i = 0; i < message.extensionRange.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                        if (error)
                            return "extensionRange." + error;
                    }
                }
                if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                    if (!Array.isArray(message.oneofDecl))
                        return "oneofDecl: array expected";
                    for (let i = 0; i < message.oneofDecl.length; ++i) {
                        let error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                        if (error)
                            return "oneofDecl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (let i = 0; i < message.reservedRange.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (let i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                let message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (let i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nestedType) {
                    if (!Array.isArray(object.nestedType))
                        throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                    message.nestedType = [];
                    for (let i = 0; i < object.nestedType.length; ++i) {
                        if (typeof object.nestedType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                        message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (let i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.extensionRange) {
                    if (!Array.isArray(object.extensionRange))
                        throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                    message.extensionRange = [];
                    for (let i = 0; i < object.extensionRange.length; ++i) {
                        if (typeof object.extensionRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                        message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                    }
                }
                if (object.oneofDecl) {
                    if (!Array.isArray(object.oneofDecl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                    message.oneofDecl = [];
                    for (let i = 0; i < object.oneofDecl.length; ++i) {
                        if (typeof object.oneofDecl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                        message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (let i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (let i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nestedType = [];
                    object.enumType = [];
                    object.extensionRange = [];
                    object.extension = [];
                    object.oneofDecl = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (let j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nestedType && message.nestedType.length) {
                    object.nestedType = [];
                    for (let j = 0; j < message.nestedType.length; ++j)
                        object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (let j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.extensionRange && message.extensionRange.length) {
                    object.extensionRange = [];
                    for (let j = 0; j < message.extensionRange.length; ++j)
                        object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneofDecl && message.oneofDecl.length) {
                    object.oneofDecl = [];
                    for (let j = 0; j < message.oneofDecl.length; ++j)
                        object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                }
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (let j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (let j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * Creates a new ExtensionRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                 */
                ExtensionRange.create = function create(properties) {
                    return new ExtensionRange(properties);
                };

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Creates a new ReservedRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                 */
                ReservedRange.create = function create(properties) {
                    return new ReservedRange(properties);
                };

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [typeName] FieldDescriptorProto typeName
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
             * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
             * @property {string|null} [jsonName] FieldDescriptorProto jsonName
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto typeName.
             * @member {string} typeName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.typeName = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto defaultValue.
             * @member {string} defaultValue
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.defaultValue = "";

            /**
             * FieldDescriptorProto oneofIndex.
             * @member {number} oneofIndex
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneofIndex = 0;

            /**
             * FieldDescriptorProto jsonName.
             * @member {string} jsonName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.jsonName = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * Creates a new FieldDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
             */
            FieldDescriptorProto.create = function create(properties) {
                return new FieldDescriptorProto(properties);
            };

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                return writer;
            };

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.number = reader.int32();
                        break;
                    case 4:
                        message.label = reader.int32();
                        break;
                    case 5:
                        message.type = reader.int32();
                        break;
                    case 6:
                        message.typeName = reader.string();
                        break;
                    case 2:
                        message.extendee = reader.string();
                        break;
                    case 7:
                        message.defaultValue = reader.string();
                        break;
                    case 9:
                        message.oneofIndex = reader.int32();
                        break;
                    case 10:
                        message.jsonName = reader.string();
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    if (!$util.isString(message.typeName))
                        return "typeName: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    if (!$util.isString(message.defaultValue))
                        return "defaultValue: string expected";
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    if (!$util.isInteger(message.oneofIndex))
                        return "oneofIndex: integer expected";
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    if (!$util.isString(message.jsonName))
                        return "jsonName: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                }
                switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.typeName != null)
                    message.typeName = String(object.typeName);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.defaultValue != null)
                    message.defaultValue = String(object.defaultValue);
                if (object.oneofIndex != null)
                    message.oneofIndex = object.oneofIndex | 0;
                if (object.jsonName != null)
                    message.jsonName = String(object.jsonName);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.typeName = "";
                    object.defaultValue = "";
                    object.options = null;
                    object.oneofIndex = 0;
                    object.jsonName = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    object.typeName = message.typeName;
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    object.defaultValue = message.defaultValue;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    object.oneofIndex = message.oneofIndex;
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    object.jsonName = message.jsonName;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Creates a new OneofDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
             */
            OneofDescriptorProto.create = function create(properties) {
                return new OneofDescriptorProto(properties);
            };

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * Creates a new EnumDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
             */
            EnumDescriptorProto.create = function create(properties) {
                return new EnumDescriptorProto(properties);
            };

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.value.length)
                    for (let i = 0; i < message.value.length; ++i)
                        $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.value && message.value.length))
                            message.value = [];
                        message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (let i = 0; i < message.value.length; ++i) {
                        let error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (let i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.value = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (let j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Creates a new EnumValueDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
             */
            EnumValueDescriptorProto.create = function create(properties) {
                return new EnumValueDescriptorProto(properties);
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.number = reader.int32();
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Creates a new ServiceDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
             */
            ServiceDescriptorProto.create = function create(properties) {
                return new ServiceDescriptorProto(properties);
            };

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.method != null && message.method.length)
                    for (let i = 0; i < message.method.length; ++i)
                        $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.method && message.method.length))
                            message.method = [];
                        message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (let i = 0; i < message.method.length; ++i) {
                        let error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (let i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (let j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [inputType] MethodDescriptorProto inputType
             * @property {string|null} [outputType] MethodDescriptorProto outputType
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
             * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto inputType.
             * @member {string} inputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.inputType = "";

            /**
             * MethodDescriptorProto outputType.
             * @member {string} outputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.outputType = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto clientStreaming.
             * @member {boolean} clientStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.clientStreaming = false;

            /**
             * MethodDescriptorProto serverStreaming.
             * @member {boolean} serverStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.serverStreaming = false;

            /**
             * Creates a new MethodDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
             */
            MethodDescriptorProto.create = function create(properties) {
                return new MethodDescriptorProto(properties);
            };

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                return writer;
            };

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.inputType = reader.string();
                        break;
                    case 3:
                        message.outputType = reader.string();
                        break;
                    case 4:
                        message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.clientStreaming = reader.bool();
                        break;
                    case 6:
                        message.serverStreaming = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    if (!$util.isString(message.inputType))
                        return "inputType: string expected";
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    if (!$util.isString(message.outputType))
                        return "outputType: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    if (typeof message.clientStreaming !== "boolean")
                        return "clientStreaming: boolean expected";
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    if (typeof message.serverStreaming !== "boolean")
                        return "serverStreaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.inputType != null)
                    message.inputType = String(object.inputType);
                if (object.outputType != null)
                    message.outputType = String(object.outputType);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.clientStreaming != null)
                    message.clientStreaming = Boolean(object.clientStreaming);
                if (object.serverStreaming != null)
                    message.serverStreaming = Boolean(object.serverStreaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.inputType = "";
                    object.outputType = "";
                    object.options = null;
                    object.clientStreaming = false;
                    object.serverStreaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    object.inputType = message.inputType;
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    object.outputType = message.outputType;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    object.clientStreaming = message.clientStreaming;
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    object.serverStreaming = message.serverStreaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [javaPackage] FileOptions javaPackage
             * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
             * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
             * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
             * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
             * @property {string|null} [goPackage] FileOptions goPackage
             * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
             * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
             * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
             * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
             * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions javaPackage.
             * @member {string} javaPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaPackage = "";

            /**
             * FileOptions javaOuterClassname.
             * @member {string} javaOuterClassname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaOuterClassname = "";

            /**
             * FileOptions javaMultipleFiles.
             * @member {boolean} javaMultipleFiles
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaMultipleFiles = false;

            /**
             * FileOptions javaGenerateEqualsAndHash.
             * @member {boolean} javaGenerateEqualsAndHash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenerateEqualsAndHash = false;

            /**
             * FileOptions javaStringCheckUtf8.
             * @member {boolean} javaStringCheckUtf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaStringCheckUtf8 = false;

            /**
             * FileOptions optimizeFor.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimizeFor = 1;

            /**
             * FileOptions goPackage.
             * @member {string} goPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.goPackage = "";

            /**
             * FileOptions ccGenericServices.
             * @member {boolean} ccGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccGenericServices = false;

            /**
             * FileOptions javaGenericServices.
             * @member {boolean} javaGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenericServices = false;

            /**
             * FileOptions pyGenericServices.
             * @member {boolean} pyGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.pyGenericServices = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions ccEnableArenas.
             * @member {boolean} ccEnableArenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccEnableArenas = false;

            /**
             * FileOptions objcClassPrefix.
             * @member {string} objcClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objcClassPrefix = "";

            /**
             * FileOptions csharpNamespace.
             * @member {string} csharpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharpNamespace = "";

            /**
             * FileOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new FileOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             * @returns {google.protobuf.FileOptions} FileOptions instance
             */
            FileOptions.create = function create(properties) {
                return new FileOptions(properties);
            };

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.javaPackage = reader.string();
                        break;
                    case 8:
                        message.javaOuterClassname = reader.string();
                        break;
                    case 10:
                        message.javaMultipleFiles = reader.bool();
                        break;
                    case 20:
                        message.javaGenerateEqualsAndHash = reader.bool();
                        break;
                    case 27:
                        message.javaStringCheckUtf8 = reader.bool();
                        break;
                    case 9:
                        message.optimizeFor = reader.int32();
                        break;
                    case 11:
                        message.goPackage = reader.string();
                        break;
                    case 16:
                        message.ccGenericServices = reader.bool();
                        break;
                    case 17:
                        message.javaGenericServices = reader.bool();
                        break;
                    case 18:
                        message.pyGenericServices = reader.bool();
                        break;
                    case 23:
                        message.deprecated = reader.bool();
                        break;
                    case 31:
                        message.ccEnableArenas = reader.bool();
                        break;
                    case 36:
                        message.objcClassPrefix = reader.string();
                        break;
                    case 37:
                        message.csharpNamespace = reader.string();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    if (!$util.isString(message.javaPackage))
                        return "javaPackage: string expected";
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    if (!$util.isString(message.javaOuterClassname))
                        return "javaOuterClassname: string expected";
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    if (typeof message.javaMultipleFiles !== "boolean")
                        return "javaMultipleFiles: boolean expected";
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                        return "javaGenerateEqualsAndHash: boolean expected";
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    if (typeof message.javaStringCheckUtf8 !== "boolean")
                        return "javaStringCheckUtf8: boolean expected";
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    switch (message.optimizeFor) {
                    default:
                        return "optimizeFor: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    if (!$util.isString(message.goPackage))
                        return "goPackage: string expected";
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    if (typeof message.ccGenericServices !== "boolean")
                        return "ccGenericServices: boolean expected";
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    if (typeof message.javaGenericServices !== "boolean")
                        return "javaGenericServices: boolean expected";
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    if (typeof message.pyGenericServices !== "boolean")
                        return "pyGenericServices: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    if (typeof message.ccEnableArenas !== "boolean")
                        return "ccEnableArenas: boolean expected";
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    if (!$util.isString(message.objcClassPrefix))
                        return "objcClassPrefix: string expected";
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    if (!$util.isString(message.csharpNamespace))
                        return "csharpNamespace: string expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                let message = new $root.google.protobuf.FileOptions();
                if (object.javaPackage != null)
                    message.javaPackage = String(object.javaPackage);
                if (object.javaOuterClassname != null)
                    message.javaOuterClassname = String(object.javaOuterClassname);
                if (object.javaMultipleFiles != null)
                    message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                if (object.javaGenerateEqualsAndHash != null)
                    message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                if (object.javaStringCheckUtf8 != null)
                    message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                switch (object.optimizeFor) {
                case "SPEED":
                case 1:
                    message.optimizeFor = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimizeFor = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimizeFor = 3;
                    break;
                }
                if (object.goPackage != null)
                    message.goPackage = String(object.goPackage);
                if (object.ccGenericServices != null)
                    message.ccGenericServices = Boolean(object.ccGenericServices);
                if (object.javaGenericServices != null)
                    message.javaGenericServices = Boolean(object.javaGenericServices);
                if (object.pyGenericServices != null)
                    message.pyGenericServices = Boolean(object.pyGenericServices);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.ccEnableArenas != null)
                    message.ccEnableArenas = Boolean(object.ccEnableArenas);
                if (object.objcClassPrefix != null)
                    message.objcClassPrefix = String(object.objcClassPrefix);
                if (object.csharpNamespace != null)
                    message.csharpNamespace = String(object.csharpNamespace);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.javaPackage = "";
                    object.javaOuterClassname = "";
                    object.optimizeFor = options.enums === String ? "SPEED" : 1;
                    object.javaMultipleFiles = false;
                    object.goPackage = "";
                    object.ccGenericServices = false;
                    object.javaGenericServices = false;
                    object.pyGenericServices = false;
                    object.javaGenerateEqualsAndHash = false;
                    object.deprecated = false;
                    object.javaStringCheckUtf8 = false;
                    object.ccEnableArenas = false;
                    object.objcClassPrefix = "";
                    object.csharpNamespace = "";
                }
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    object.javaPackage = message.javaPackage;
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    object.javaOuterClassname = message.javaOuterClassname;
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    object.javaMultipleFiles = message.javaMultipleFiles;
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    object.goPackage = message.goPackage;
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    object.ccGenericServices = message.ccGenericServices;
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    object.javaGenericServices = message.javaGenericServices;
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    object.pyGenericServices = message.pyGenericServices;
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    object.ccEnableArenas = message.ccEnableArenas;
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    object.objcClassPrefix = message.objcClassPrefix;
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    object.csharpNamespace = message.csharpNamespace;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
             * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [mapEntry] MessageOptions mapEntry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions messageSetWireFormat.
             * @member {boolean} messageSetWireFormat
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.messageSetWireFormat = false;

            /**
             * MessageOptions noStandardDescriptorAccessor.
             * @member {boolean} noStandardDescriptorAccessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.noStandardDescriptorAccessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions mapEntry.
             * @member {boolean} mapEntry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.mapEntry = false;

            /**
             * MessageOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new MessageOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             * @returns {google.protobuf.MessageOptions} MessageOptions instance
             */
            MessageOptions.create = function create(properties) {
                return new MessageOptions(properties);
            };

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.messageSetWireFormat = reader.bool();
                        break;
                    case 2:
                        message.noStandardDescriptorAccessor = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 7:
                        message.mapEntry = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    if (typeof message.messageSetWireFormat !== "boolean")
                        return "messageSetWireFormat: boolean expected";
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    if (typeof message.noStandardDescriptorAccessor !== "boolean")
                        return "noStandardDescriptorAccessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    if (typeof message.mapEntry !== "boolean")
                        return "mapEntry: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                let message = new $root.google.protobuf.MessageOptions();
                if (object.messageSetWireFormat != null)
                    message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                if (object.noStandardDescriptorAccessor != null)
                    message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.mapEntry != null)
                    message.mapEntry = Boolean(object.mapEntry);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.messageSetWireFormat = false;
                    object.noStandardDescriptorAccessor = false;
                    object.deprecated = false;
                    object.mapEntry = false;
                }
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    object.messageSetWireFormat = message.messageSetWireFormat;
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    object.mapEntry = message.mapEntry;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new FieldOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             * @returns {google.protobuf.FieldOptions} FieldOptions instance
             */
            FieldOptions.create = function create(properties) {
                return new FieldOptions(properties);
            };

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ctype = reader.int32();
                        break;
                    case 2:
                        message.packed = reader.bool();
                        break;
                    case 6:
                        message.jstype = reader.int32();
                        break;
                    case 5:
                        message.lazy = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 10:
                        message.weak = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                let message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new OneofOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             * @returns {google.protobuf.OneofOptions} OneofOptions instance
             */
            OneofOptions.create = function create(properties) {
                return new OneofOptions(properties);
            };

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                let message = new $root.google.protobuf.OneofOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allowAlias] EnumOptions allowAlias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allowAlias.
             * @member {boolean} allowAlias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allowAlias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new EnumOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             * @returns {google.protobuf.EnumOptions} EnumOptions instance
             */
            EnumOptions.create = function create(properties) {
                return new EnumOptions(properties);
            };

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.allowAlias = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    if (typeof message.allowAlias !== "boolean")
                        return "allowAlias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                let message = new $root.google.protobuf.EnumOptions();
                if (object.allowAlias != null)
                    message.allowAlias = Boolean(object.allowAlias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.allowAlias = false;
                    object.deprecated = false;
                }
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    object.allowAlias = message.allowAlias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new EnumValueOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
             */
            EnumValueOptions.create = function create(properties) {
                return new EnumValueOptions(properties);
            };

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                let message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new ServiceOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
             */
            ServiceOptions.create = function create(properties) {
                return new ServiceOptions(properties);
            };

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                let message = new $root.google.protobuf.ServiceOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
             * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * MethodOptions .google.api.http.
             * @member {google.api.IHttpRule|null|undefined} .google.api.http
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".google.api.http"] = null;

            /**
             * Creates a new MethodOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             * @returns {google.protobuf.MethodOptions} MethodOptions instance
             */
            MethodOptions.create = function create(properties) {
                return new MethodOptions(properties);
            };

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                    $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 72295728:
                        message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                    let error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                    if (error)
                        return ".google.api.http." + error;
                }
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                let message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".google.api.http"] != null) {
                    if (typeof object[".google.api.http"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                    message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object[".google.api.http"] = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                    object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifierValue] UninterpretedOption identifierValue
             * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
             * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
             * @property {number|null} [doubleValue] UninterpretedOption doubleValue
             * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
             * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifierValue.
             * @member {string} identifierValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifierValue = "";

            /**
             * UninterpretedOption positiveIntValue.
             * @member {number|Long} positiveIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negativeIntValue.
             * @member {number|Long} negativeIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption doubleValue.
             * @member {number} doubleValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.doubleValue = 0;

            /**
             * UninterpretedOption stringValue.
             * @member {Uint8Array} stringValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregateValue.
             * @member {string} aggregateValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregateValue = "";

            /**
             * Creates a new UninterpretedOption instance using the specified properties.
             * @function create
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
             */
            UninterpretedOption.create = function create(properties) {
                return new UninterpretedOption(properties);
            };

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.name.length)
                    for (let i = 0; i < message.name.length; ++i)
                        $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                return writer;
            };

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        if (!(message.name && message.name.length))
                            message.name = [];
                        message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.identifierValue = reader.string();
                        break;
                    case 4:
                        message.positiveIntValue = reader.uint64();
                        break;
                    case 5:
                        message.negativeIntValue = reader.int64();
                        break;
                    case 6:
                        message.doubleValue = reader.double();
                        break;
                    case 7:
                        message.stringValue = reader.bytes();
                        break;
                    case 8:
                        message.aggregateValue = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (let i = 0; i < message.name.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    if (!$util.isString(message.identifierValue))
                        return "identifierValue: string expected";
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                        return "positiveIntValue: integer|Long expected";
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                        return "negativeIntValue: integer|Long expected";
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    if (typeof message.doubleValue !== "number")
                        return "doubleValue: number expected";
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                        return "stringValue: buffer expected";
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    if (!$util.isString(message.aggregateValue))
                        return "aggregateValue: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                let message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (let i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifierValue != null)
                    message.identifierValue = String(object.identifierValue);
                if (object.positiveIntValue != null)
                    if ($util.Long)
                        (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                    else if (typeof object.positiveIntValue === "string")
                        message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                    else if (typeof object.positiveIntValue === "number")
                        message.positiveIntValue = object.positiveIntValue;
                    else if (typeof object.positiveIntValue === "object")
                        message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                if (object.negativeIntValue != null)
                    if ($util.Long)
                        (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                    else if (typeof object.negativeIntValue === "string")
                        message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                    else if (typeof object.negativeIntValue === "number")
                        message.negativeIntValue = object.negativeIntValue;
                    else if (typeof object.negativeIntValue === "object")
                        message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                if (object.doubleValue != null)
                    message.doubleValue = Number(object.doubleValue);
                if (object.stringValue != null)
                    if (typeof object.stringValue === "string")
                        $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                    else if (object.stringValue.length)
                        message.stringValue = object.stringValue;
                if (object.aggregateValue != null)
                    message.aggregateValue = String(object.aggregateValue);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifierValue = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positiveIntValue = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negativeIntValue = options.longs === String ? "0" : 0;
                    object.doubleValue = 0;
                    if (options.bytes === String)
                        object.stringValue = "";
                    else {
                        object.stringValue = [];
                        if (options.bytes !== Array)
                            object.stringValue = $util.newBuffer(object.stringValue);
                    }
                    object.aggregateValue = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (let j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    object.identifierValue = message.identifierValue;
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (typeof message.positiveIntValue === "number")
                        object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                    else
                        object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (typeof message.negativeIntValue === "number")
                        object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                    else
                        object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    object.aggregateValue = message.aggregateValue;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} namePart NamePart namePart
                 * @property {boolean} isExtension NamePart isExtension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart namePart.
                 * @member {string} namePart
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.namePart = "";

                /**
                 * NamePart isExtension.
                 * @member {boolean} isExtension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.isExtension = false;

                /**
                 * Creates a new NamePart instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                 */
                NamePart.create = function create(properties) {
                    return new NamePart(properties);
                };

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                    return writer;
                };

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.namePart = reader.string();
                            break;
                        case 2:
                            message.isExtension = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("namePart"))
                        throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                    if (!message.hasOwnProperty("isExtension"))
                        throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.namePart))
                        return "namePart: string expected";
                    if (typeof message.isExtension !== "boolean")
                        return "isExtension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    let message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.namePart != null)
                        message.namePart = String(object.namePart);
                    if (object.isExtension != null)
                        message.isExtension = Boolean(object.isExtension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.namePart = "";
                        object.isExtension = false;
                    }
                    if (message.namePart != null && message.hasOwnProperty("namePart"))
                        object.namePart = message.namePart;
                    if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                        object.isExtension = message.isExtension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Creates a new SourceCodeInfo instance using the specified properties.
             * @function create
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
             */
            SourceCodeInfo.create = function create(properties) {
                return new SourceCodeInfo(properties);
            };

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.location != null && message.location.length)
                    for (let i = 0; i < message.location.length; ++i)
                        $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.location && message.location.length))
                            message.location = [];
                        message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (let i = 0; i < message.location.length; ++i) {
                        let error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                let message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (let i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (let j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leadingComments] Location leadingComments
                 * @property {string|null} [trailingComments] Location trailingComments
                 * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leadingDetachedComments = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leadingComments.
                 * @member {string} leadingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingComments = "";

                /**
                 * Location trailingComments.
                 * @member {string} trailingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailingComments = "";

                /**
                 * Location leadingDetachedComments.
                 * @member {Array.<string>} leadingDetachedComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingDetachedComments = $util.emptyArray;

                /**
                 * Creates a new Location instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                 */
                Location.create = function create(properties) {
                    return new Location(properties);
                };

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.span != null && message.span.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (let i = 0; i < message.span.length; ++i)
                            writer.int32(message.span[i]);
                        writer.ldelim();
                    }
                    if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                    if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                    if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                        for (let i = 0; i < message.leadingDetachedComments.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            if (!(message.span && message.span.length))
                                message.span = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.span.push(reader.int32());
                            } else
                                message.span.push(reader.int32());
                            break;
                        case 3:
                            message.leadingComments = reader.string();
                            break;
                        case 4:
                            message.trailingComments = reader.string();
                            break;
                        case 6:
                            if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                message.leadingDetachedComments = [];
                            message.leadingDetachedComments.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (let i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        if (!$util.isString(message.leadingComments))
                            return "leadingComments: string expected";
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        if (!$util.isString(message.trailingComments))
                            return "trailingComments: string expected";
                    if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                        if (!Array.isArray(message.leadingDetachedComments))
                            return "leadingDetachedComments: array expected";
                        for (let i = 0; i < message.leadingDetachedComments.length; ++i)
                            if (!$util.isString(message.leadingDetachedComments[i]))
                                return "leadingDetachedComments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    let message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (let i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leadingComments != null)
                        message.leadingComments = String(object.leadingComments);
                    if (object.trailingComments != null)
                        message.trailingComments = String(object.trailingComments);
                    if (object.leadingDetachedComments) {
                        if (!Array.isArray(object.leadingDetachedComments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                        message.leadingDetachedComments = [];
                        for (let i = 0; i < object.leadingDetachedComments.length; ++i)
                            message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leadingDetachedComments = [];
                    }
                    if (options.defaults) {
                        object.leadingComments = "";
                        object.trailingComments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (let j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        object.leadingComments = message.leadingComments;
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        object.trailingComments = message.trailingComments;
                    if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                        object.leadingDetachedComments = [];
                        for (let j = 0; j < message.leadingDetachedComments.length; ++j)
                            object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Creates a new GeneratedCodeInfo instance using the specified properties.
             * @function create
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
             */
            GeneratedCodeInfo.create = function create(properties) {
                return new GeneratedCodeInfo(properties);
            };

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.annotation != null && message.annotation.length)
                    for (let i = 0; i < message.annotation.length; ++i)
                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.annotation && message.annotation.length))
                            message.annotation = [];
                        message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (let i = 0; i < message.annotation.length; ++i) {
                        let error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                let message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (let i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (let j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [sourceFile] Annotation sourceFile
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation sourceFile.
                 * @member {string} sourceFile
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.sourceFile = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Creates a new Annotation instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                 */
                Annotation.create = function create(properties) {
                    return new Annotation(properties);
                };

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                    if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            message.sourceFile = reader.string();
                            break;
                        case 3:
                            message.begin = reader.int32();
                            break;
                        case 4:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        if (!$util.isString(message.sourceFile))
                            return "sourceFile: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    let message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.sourceFile != null)
                        message.sourceFile = String(object.sourceFile);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.sourceFile = "";
                        object.begin = 0;
                        object.end = 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        object.sourceFile = message.sourceFile;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        return protobuf;
    })();

    return google;
})();